
PP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800574c  0800574c  0001574c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800588c  0800588c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  0800588c  0800588c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800588c  0800588c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800588c  0800588c  0001588c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005890  08005890  00015890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000084  08005918  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08005918  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012352  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f5  00000000  00000000  00032406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00034700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  000356f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001574f  00000000  00000000  00036618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013552  00000000  00000000  0004bd67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087507  00000000  00000000  0005f2b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e67c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000477c  00000000  00000000  000e6810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005734 	.word	0x08005734

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08005734 	.word	0x08005734

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800027a:	4a38      	ldr	r2, [pc, #224]	; (800035c <HD44780_Init+0xec>)
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000280:	4b37      	ldr	r3, [pc, #220]	; (8000360 <HD44780_Init+0xf0>)
 8000282:	2208      	movs	r2, #8
 8000284:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000286:	4b37      	ldr	r3, [pc, #220]	; (8000364 <HD44780_Init+0xf4>)
 8000288:	2200      	movs	r2, #0
 800028a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800028c:	4b33      	ldr	r3, [pc, #204]	; (800035c <HD44780_Init+0xec>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b01      	cmp	r3, #1
 8000292:	d907      	bls.n	80002a4 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000294:	4b33      	ldr	r3, [pc, #204]	; (8000364 <HD44780_Init+0xf4>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	f043 0308 	orr.w	r3, r3, #8
 800029c:	b2da      	uxtb	r2, r3
 800029e:	4b31      	ldr	r3, [pc, #196]	; (8000364 <HD44780_Init+0xf4>)
 80002a0:	701a      	strb	r2, [r3, #0]
 80002a2:	e006      	b.n	80002b2 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80002a4:	4b2f      	ldr	r3, [pc, #188]	; (8000364 <HD44780_Init+0xf4>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	f043 0304 	orr.w	r3, r3, #4
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	4b2d      	ldr	r3, [pc, #180]	; (8000364 <HD44780_Init+0xf4>)
 80002b0:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80002b2:	f000 f985 	bl	80005c0 <DelayInit>
  HAL_Delay(50);
 80002b6:	2032      	movs	r0, #50	; 0x32
 80002b8:	f000 fe80 	bl	8000fbc <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80002bc:	4b28      	ldr	r3, [pc, #160]	; (8000360 <HD44780_Init+0xf0>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 f943 	bl	800054c <ExpanderWrite>
  HAL_Delay(1000);
 80002c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ca:	f000 fe77 	bl	8000fbc <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80002ce:	2030      	movs	r0, #48	; 0x30
 80002d0:	f000 f92b 	bl	800052a <Write4Bits>
  DelayUS(4500);
 80002d4:	f241 1094 	movw	r0, #4500	; 0x1194
 80002d8:	f000 f99c 	bl	8000614 <DelayUS>

  Write4Bits(0x03 << 4);
 80002dc:	2030      	movs	r0, #48	; 0x30
 80002de:	f000 f924 	bl	800052a <Write4Bits>
  DelayUS(4500);
 80002e2:	f241 1094 	movw	r0, #4500	; 0x1194
 80002e6:	f000 f995 	bl	8000614 <DelayUS>

  Write4Bits(0x03 << 4);
 80002ea:	2030      	movs	r0, #48	; 0x30
 80002ec:	f000 f91d 	bl	800052a <Write4Bits>
  DelayUS(4500);
 80002f0:	f241 1094 	movw	r0, #4500	; 0x1194
 80002f4:	f000 f98e 	bl	8000614 <DelayUS>

  Write4Bits(0x02 << 4);
 80002f8:	2020      	movs	r0, #32
 80002fa:	f000 f916 	bl	800052a <Write4Bits>
  DelayUS(100);
 80002fe:	2064      	movs	r0, #100	; 0x64
 8000300:	f000 f988 	bl	8000614 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000304:	4b17      	ldr	r3, [pc, #92]	; (8000364 <HD44780_Init+0xf4>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	f043 0320 	orr.w	r3, r3, #32
 800030c:	b2db      	uxtb	r3, r3
 800030e:	4618      	mov	r0, r3
 8000310:	f000 f8ce 	bl	80004b0 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000314:	4b14      	ldr	r3, [pc, #80]	; (8000368 <HD44780_Init+0xf8>)
 8000316:	2204      	movs	r2, #4
 8000318:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800031a:	f000 f875 	bl	8000408 <HD44780_Display>
  HD44780_Clear();
 800031e:	f000 f82b 	bl	8000378 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000322:	4b12      	ldr	r3, [pc, #72]	; (800036c <HD44780_Init+0xfc>)
 8000324:	2202      	movs	r2, #2
 8000326:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000328:	4b10      	ldr	r3, [pc, #64]	; (800036c <HD44780_Init+0xfc>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	b2db      	uxtb	r3, r3
 8000332:	4618      	mov	r0, r3
 8000334:	f000 f8bc 	bl	80004b0 <SendCommand>
  DelayUS(4500);
 8000338:	f241 1094 	movw	r0, #4500	; 0x1194
 800033c:	f000 f96a 	bl	8000614 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000340:	490b      	ldr	r1, [pc, #44]	; (8000370 <HD44780_Init+0x100>)
 8000342:	2000      	movs	r0, #0
 8000344:	f000 f876 	bl	8000434 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000348:	490a      	ldr	r1, [pc, #40]	; (8000374 <HD44780_Init+0x104>)
 800034a:	2001      	movs	r0, #1
 800034c:	f000 f872 	bl	8000434 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000350:	f000 f81d 	bl	800038e <HD44780_Home>
}
 8000354:	bf00      	nop
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	200000a3 	.word	0x200000a3
 8000360:	200000a4 	.word	0x200000a4
 8000364:	200000a0 	.word	0x200000a0
 8000368:	200000a1 	.word	0x200000a1
 800036c:	200000a2 	.word	0x200000a2
 8000370:	20000000 	.word	0x20000000
 8000374:	20000008 	.word	0x20000008

08000378 <HD44780_Clear>:

void HD44780_Clear()
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800037c:	2001      	movs	r0, #1
 800037e:	f000 f897 	bl	80004b0 <SendCommand>
  DelayUS(2000);
 8000382:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000386:	f000 f945 	bl	8000614 <DelayUS>
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}

0800038e <HD44780_Home>:

void HD44780_Home()
{
 800038e:	b580      	push	{r7, lr}
 8000390:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000392:	2002      	movs	r0, #2
 8000394:	f000 f88c 	bl	80004b0 <SendCommand>
  DelayUS(2000);
 8000398:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800039c:	f000 f93a 	bl	8000614 <DelayUS>
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80003a4:	b590      	push	{r4, r7, lr}
 80003a6:	b087      	sub	sp, #28
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	460a      	mov	r2, r1
 80003ae:	71fb      	strb	r3, [r7, #7]
 80003b0:	4613      	mov	r3, r2
 80003b2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <HD44780_SetCursor+0x5c>)
 80003b6:	f107 0408 	add.w	r4, r7, #8
 80003ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80003c0:	4b10      	ldr	r3, [pc, #64]	; (8000404 <HD44780_SetCursor+0x60>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	79ba      	ldrb	r2, [r7, #6]
 80003c6:	429a      	cmp	r2, r3
 80003c8:	d303      	bcc.n	80003d2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <HD44780_SetCursor+0x60>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80003d2:	79bb      	ldrb	r3, [r7, #6]
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	3318      	adds	r3, #24
 80003d8:	443b      	add	r3, r7
 80003da:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	4413      	add	r3, r2
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	b25b      	sxtb	r3, r3
 80003e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80003ec:	b25b      	sxtb	r3, r3
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 f85d 	bl	80004b0 <SendCommand>
}
 80003f6:	bf00      	nop
 80003f8:	371c      	adds	r7, #28
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd90      	pop	{r4, r7, pc}
 80003fe:	bf00      	nop
 8000400:	0800574c 	.word	0x0800574c
 8000404:	200000a3 	.word	0x200000a3

08000408 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <HD44780_Display+0x28>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	f043 0304 	orr.w	r3, r3, #4
 8000414:	b2da      	uxtb	r2, r3
 8000416:	4b06      	ldr	r3, [pc, #24]	; (8000430 <HD44780_Display+0x28>)
 8000418:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <HD44780_Display+0x28>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	f043 0308 	orr.w	r3, r3, #8
 8000422:	b2db      	uxtb	r3, r3
 8000424:	4618      	mov	r0, r3
 8000426:	f000 f843 	bl	80004b0 <SendCommand>
}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	200000a1 	.word	0x200000a1

08000434 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	6039      	str	r1, [r7, #0]
 800043e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	f003 0307 	and.w	r3, r3, #7
 8000446:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	00db      	lsls	r3, r3, #3
 800044c:	b25b      	sxtb	r3, r3
 800044e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000452:	b25b      	sxtb	r3, r3
 8000454:	b2db      	uxtb	r3, r3
 8000456:	4618      	mov	r0, r3
 8000458:	f000 f82a 	bl	80004b0 <SendCommand>
  for (int i=0; i<8; i++)
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	e009      	b.n	8000476 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	683a      	ldr	r2, [r7, #0]
 8000466:	4413      	add	r3, r2
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	4618      	mov	r0, r3
 800046c:	f000 f82e 	bl	80004cc <SendChar>
  for (int i=0; i<8; i++)
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	3301      	adds	r3, #1
 8000474:	60fb      	str	r3, [r7, #12]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	2b07      	cmp	r3, #7
 800047a:	ddf2      	ble.n	8000462 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800047c:	bf00      	nop
 800047e:	bf00      	nop
 8000480:	3710      	adds	r7, #16
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000486:	b580      	push	{r7, lr}
 8000488:	b082      	sub	sp, #8
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800048e:	e006      	b.n	800049e <HD44780_PrintStr+0x18>
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	1c5a      	adds	r2, r3, #1
 8000494:	607a      	str	r2, [r7, #4]
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	4618      	mov	r0, r3
 800049a:	f000 f817 	bl	80004cc <SendChar>
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d1f4      	bne.n	8000490 <HD44780_PrintStr+0xa>
}
 80004a6:	bf00      	nop
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 f812 	bl	80004e8 <Send>
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <SendChar>:

static void SendChar(uint8_t ch)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	2101      	movs	r1, #1
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 f804 	bl	80004e8 <Send>
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	460a      	mov	r2, r1
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	4613      	mov	r3, r2
 80004f6:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	f023 030f 	bic.w	r3, r3, #15
 80004fe:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	011b      	lsls	r3, r3, #4
 8000504:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000506:	7bfa      	ldrb	r2, [r7, #15]
 8000508:	79bb      	ldrb	r3, [r7, #6]
 800050a:	4313      	orrs	r3, r2
 800050c:	b2db      	uxtb	r3, r3
 800050e:	4618      	mov	r0, r3
 8000510:	f000 f80b 	bl	800052a <Write4Bits>
  Write4Bits((lownib)|mode);
 8000514:	7bba      	ldrb	r2, [r7, #14]
 8000516:	79bb      	ldrb	r3, [r7, #6]
 8000518:	4313      	orrs	r3, r2
 800051a:	b2db      	uxtb	r3, r3
 800051c:	4618      	mov	r0, r3
 800051e:	f000 f804 	bl	800052a <Write4Bits>
}
 8000522:	bf00      	nop
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0
 8000530:	4603      	mov	r3, r0
 8000532:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f808 	bl	800054c <ExpanderWrite>
  PulseEnable(value);
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	4618      	mov	r0, r3
 8000540:	f000 f820 	bl	8000584 <PulseEnable>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af02      	add	r7, sp, #8
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <ExpanderWrite+0x30>)
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	4313      	orrs	r3, r2
 800055e:	b2db      	uxtb	r3, r3
 8000560:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000562:	f107 020f 	add.w	r2, r7, #15
 8000566:	230a      	movs	r3, #10
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2301      	movs	r3, #1
 800056c:	214e      	movs	r1, #78	; 0x4e
 800056e:	4804      	ldr	r0, [pc, #16]	; (8000580 <ExpanderWrite+0x34>)
 8000570:	f001 f874 	bl	800165c <HAL_I2C_Master_Transmit>
}
 8000574:	bf00      	nop
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	200000a4 	.word	0x200000a4
 8000580:	200000a8 	.word	0x200000a8

08000584 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff ffd8 	bl	800054c <ExpanderWrite>
  DelayUS(20);
 800059c:	2014      	movs	r0, #20
 800059e:	f000 f839 	bl	8000614 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	f023 0304 	bic.w	r3, r3, #4
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ffce 	bl	800054c <ExpanderWrite>
  DelayUS(20);
 80005b0:	2014      	movs	r0, #20
 80005b2:	f000 f82f 	bl	8000614 <DelayUS>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <DelayInit>:

static void DelayInit(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <DelayInit+0x4c>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	4a10      	ldr	r2, [pc, #64]	; (800060c <DelayInit+0x4c>)
 80005ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80005ce:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80005d0:	4b0e      	ldr	r3, [pc, #56]	; (800060c <DelayInit+0x4c>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	4a0d      	ldr	r2, [pc, #52]	; (800060c <DelayInit+0x4c>)
 80005d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005da:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <DelayInit+0x50>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <DelayInit+0x50>)
 80005e2:	f023 0301 	bic.w	r3, r3, #1
 80005e6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <DelayInit+0x50>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a08      	ldr	r2, [pc, #32]	; (8000610 <DelayInit+0x50>)
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <DelayInit+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80005fa:	bf00      	nop
  __ASM volatile ("NOP");
 80005fc:	bf00      	nop
  __ASM volatile ("NOP");
 80005fe:	bf00      	nop
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000edf0 	.word	0xe000edf0
 8000610:	e0001000 	.word	0xe0001000

08000614 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000614:	b480      	push	{r7}
 8000616:	b087      	sub	sp, #28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <DelayUS+0x44>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a0e      	ldr	r2, [pc, #56]	; (800065c <DelayUS+0x48>)
 8000622:	fba2 2303 	umull	r2, r3, r2, r3
 8000626:	0c9a      	lsrs	r2, r3, #18
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	fb02 f303 	mul.w	r3, r2, r3
 800062e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <DelayUS+0x4c>)
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <DelayUS+0x4c>)
 8000638:	685a      	ldr	r2, [r3, #4]
 800063a:	693b      	ldr	r3, [r7, #16]
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	697a      	ldr	r2, [r7, #20]
 8000644:	429a      	cmp	r2, r3
 8000646:	d8f6      	bhi.n	8000636 <DelayUS+0x22>
}
 8000648:	bf00      	nop
 800064a:	bf00      	nop
 800064c:	371c      	adds	r7, #28
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000014 	.word	0x20000014
 800065c:	431bde83 	.word	0x431bde83
 8000660:	e0001000 	.word	0xe0001000

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000668:	f000 fc42 	bl	8000ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066c:	f000 f816 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000670:	f000 f950 	bl	8000914 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000674:	f000 f86e 	bl	8000754 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000678:	f000 f8ac 	bl	80007d4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800067c:	f000 f91a 	bl	80008b4 <MX_USART2_UART_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000680:	4805      	ldr	r0, [pc, #20]	; (8000698 <main+0x34>)
 8000682:	f003 f80b 	bl	800369c <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000686:	2100      	movs	r1, #0
 8000688:	4803      	ldr	r0, [pc, #12]	; (8000698 <main+0x34>)
 800068a:	f003 f8bd 	bl	8003808 <HAL_TIM_IC_Start_IT>
  /* USER CODE BEGIN 2 */

  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 800068e:	2002      	movs	r0, #2
 8000690:	f7ff fdee 	bl	8000270 <HD44780_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000694:	e7fe      	b.n	8000694 <main+0x30>
 8000696:	bf00      	nop
 8000698:	200000fc 	.word	0x200000fc

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b09c      	sub	sp, #112	; 0x70
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006a6:	2228      	movs	r2, #40	; 0x28
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f004 fbcc 	bl	8004e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2230      	movs	r2, #48	; 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 fbbe 	bl	8004e48 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	2310      	movs	r3, #16
 80006d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d8:	2302      	movs	r3, #2
 80006da:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80006e0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80006e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 fb52 	bl	8001d94 <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006f6:	f000 fa5b 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2302      	movs	r3, #2
 8000700:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000710:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000714:	2102      	movs	r1, #2
 8000716:	4618      	mov	r0, r3
 8000718:	f002 fb7a 	bl	8002e10 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000722:	f000 fa45 	bl	8000bb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000726:	2320      	movs	r3, #32
 8000728:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4618      	mov	r0, r3
 8000732:	f002 fdd7 	bl	80032e4 <HAL_RCCEx_PeriphCLKConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800073c:	f000 fa38 	bl	8000bb0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000740:	2200      	movs	r2, #0
 8000742:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000746:	2000      	movs	r0, #0
 8000748:	f002 fcde 	bl	8003108 <HAL_RCC_MCOConfig>
}
 800074c:	bf00      	nop
 800074e:	3770      	adds	r7, #112	; 0x70
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000758:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_I2C1_Init+0x74>)
 800075a:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <MX_I2C1_Init+0x78>)
 800075c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000760:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <MX_I2C1_Init+0x7c>)
 8000762:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_I2C1_Init+0x74>)
 800076c:	2201      	movs	r2, #1
 800076e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_I2C1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_I2C1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800078e:	480e      	ldr	r0, [pc, #56]	; (80007c8 <MX_I2C1_Init+0x74>)
 8000790:	f000 fed4 	bl	800153c <HAL_I2C_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800079a:	f000 fa09 	bl	8000bb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800079e:	2100      	movs	r1, #0
 80007a0:	4809      	ldr	r0, [pc, #36]	; (80007c8 <MX_I2C1_Init+0x74>)
 80007a2:	f001 fa5f 	bl	8001c64 <HAL_I2CEx_ConfigAnalogFilter>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007ac:	f000 fa00 	bl	8000bb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007b0:	2100      	movs	r1, #0
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_I2C1_Init+0x74>)
 80007b4:	f001 faa1 	bl	8001cfa <HAL_I2CEx_ConfigDigitalFilter>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007be:	f000 f9f7 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200000a8 	.word	0x200000a8
 80007cc:	40005400 	.word	0x40005400
 80007d0:	2000090e 	.word	0x2000090e

080007d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08c      	sub	sp, #48	; 0x30
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000800:	4b2b      	ldr	r3, [pc, #172]	; (80008b0 <MX_TIM2_Init+0xdc>)
 8000802:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000806:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000808:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <MX_TIM2_Init+0xdc>)
 800080a:	2200      	movs	r2, #0
 800080c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080e:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <MX_TIM2_Init+0xdc>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000814:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <MX_TIM2_Init+0xdc>)
 8000816:	f04f 32ff 	mov.w	r2, #4294967295
 800081a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081c:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <MX_TIM2_Init+0xdc>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000822:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <MX_TIM2_Init+0xdc>)
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000828:	4821      	ldr	r0, [pc, #132]	; (80008b0 <MX_TIM2_Init+0xdc>)
 800082a:	f002 fedf 	bl	80035ec <HAL_TIM_Base_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000834:	f000 f9bc 	bl	8000bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800083e:	f107 0320 	add.w	r3, r7, #32
 8000842:	4619      	mov	r1, r3
 8000844:	481a      	ldr	r0, [pc, #104]	; (80008b0 <MX_TIM2_Init+0xdc>)
 8000846:	f003 fac8 	bl	8003dda <HAL_TIM_ConfigClockSource>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000850:	f000 f9ae 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000854:	4816      	ldr	r0, [pc, #88]	; (80008b0 <MX_TIM2_Init+0xdc>)
 8000856:	f002 ff75 	bl	8003744 <HAL_TIM_IC_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000860:	f000 f9a6 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	480f      	ldr	r0, [pc, #60]	; (80008b0 <MX_TIM2_Init+0xdc>)
 8000874:	f003 fe16 	bl	80044a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800087e:	f000 f997 	bl	8000bb0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000886:	2301      	movs	r3, #1
 8000888:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2200      	movs	r2, #0
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_TIM2_Init+0xdc>)
 800089a:	f003 fa02 	bl	8003ca2 <HAL_TIM_IC_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80008a4:	f000 f984 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	3730      	adds	r7, #48	; 0x30
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200000fc 	.word	0x200000fc

080008b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008ba:	4a15      	ldr	r2, [pc, #84]	; (8000910 <MX_USART2_UART_Init+0x5c>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_USART2_UART_Init+0x58>)
 80008f8:	f003 fe58 	bl	80045ac <HAL_UART_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000902:	f000 f955 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000148 	.word	0x20000148
 8000910:	40004400 	.word	0x40004400

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800092a:	4b31      	ldr	r3, [pc, #196]	; (80009f0 <MX_GPIO_Init+0xdc>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4a30      	ldr	r2, [pc, #192]	; (80009f0 <MX_GPIO_Init+0xdc>)
 8000930:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000934:	6153      	str	r3, [r2, #20]
 8000936:	4b2e      	ldr	r3, [pc, #184]	; (80009f0 <MX_GPIO_Init+0xdc>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <MX_GPIO_Init+0xdc>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	4a2a      	ldr	r2, [pc, #168]	; (80009f0 <MX_GPIO_Init+0xdc>)
 8000948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800094c:	6153      	str	r3, [r2, #20]
 800094e:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <MX_GPIO_Init+0xdc>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <MX_GPIO_Init+0xdc>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	4a24      	ldr	r2, [pc, #144]	; (80009f0 <MX_GPIO_Init+0xdc>)
 8000960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000964:	6153      	str	r3, [r2, #20]
 8000966:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <MX_GPIO_Init+0xdc>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2102      	movs	r1, #2
 8000976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097a:	f000 fdc7 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2108      	movs	r1, #8
 8000982:	481c      	ldr	r0, [pc, #112]	; (80009f4 <MX_GPIO_Init+0xe0>)
 8000984:	f000 fdc2 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000988:	2302      	movs	r3, #2
 800098a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	4619      	mov	r1, r3
 800099e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a2:	f000 fc41 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4619      	mov	r1, r3
 80009c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c6:	f000 fc2f 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009ca:	2308      	movs	r3, #8
 80009cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	4619      	mov	r1, r3
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_GPIO_Init+0xe0>)
 80009e2:	f000 fc21 	bl	8001228 <HAL_GPIO_Init>

}
 80009e6:	bf00      	nop
 80009e8:	3720      	adds	r7, #32
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000
 80009f4:	48000400 	.word	0x48000400

080009f8 <HAL_TIM_IC_CaptureCallback>:
volatile int aff =0;
volatile char Frequency_s[40];


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	cnt[ind]=(uint32_t) HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000a00:	4b51      	ldr	r3, [pc, #324]	; (8000b48 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000a02:	681c      	ldr	r4, [r3, #0]
 8000a04:	2100      	movs	r1, #0
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f003 fab0 	bl	8003f6c <HAL_TIM_ReadCapturedValue>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4a4f      	ldr	r2, [pc, #316]	; (8000b4c <HAL_TIM_IC_CaptureCallback+0x154>)
 8000a10:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	ind++;
 8000a14:	4b4c      	ldr	r3, [pc, #304]	; (8000b48 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	4a4b      	ldr	r2, [pc, #300]	; (8000b48 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000a1c:	6013      	str	r3, [r2, #0]
	if (ind ==5)
 8000a1e:	4b4a      	ldr	r3, [pc, #296]	; (8000b48 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b05      	cmp	r3, #5
 8000a24:	f040 808b 	bne.w	8000b3e <HAL_TIM_IC_CaptureCallback+0x146>
		{ind=0;
 8000a28:	4b47      	ldr	r3, [pc, #284]	; (8000b48 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
		diff = (cnt[4]+ overflow*4294967295 )-cnt[0];
 8000a2e:	4b47      	ldr	r3, [pc, #284]	; (8000b4c <HAL_TIM_IC_CaptureCallback+0x154>)
 8000a30:	691a      	ldr	r2, [r3, #16]
 8000a32:	4b47      	ldr	r3, [pc, #284]	; (8000b50 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	1ad2      	subs	r2, r2, r3
 8000a38:	4b44      	ldr	r3, [pc, #272]	; (8000b4c <HAL_TIM_IC_CaptureCallback+0x154>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	4a45      	ldr	r2, [pc, #276]	; (8000b54 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000a40:	6013      	str	r3, [r2, #0]
		overflow=0;
 8000a42:	4b43      	ldr	r3, [pc, #268]	; (8000b50 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
		Frequency = 64000000/((htim->Init.Prescaler+1)*diff);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	4a41      	ldr	r2, [pc, #260]	; (8000b54 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000a50:	6812      	ldr	r2, [r2, #0]
 8000a52:	fb02 f303 	mul.w	r3, r2, r3
 8000a56:	4a40      	ldr	r2, [pc, #256]	; (8000b58 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5c:	4a3f      	ldr	r2, [pc, #252]	; (8000b5c <HAL_TIM_IC_CaptureCallback+0x164>)
 8000a5e:	6013      	str	r3, [r2, #0]
		Frequency = Frequency*4;
 8000a60:	4b3e      	ldr	r3, [pc, #248]	; (8000b5c <HAL_TIM_IC_CaptureCallback+0x164>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	4a3d      	ldr	r2, [pc, #244]	; (8000b5c <HAL_TIM_IC_CaptureCallback+0x164>)
 8000a68:	6013      	str	r3, [r2, #0]
		Capacity = 1000000/Frequency;
 8000a6a:	4b3c      	ldr	r3, [pc, #240]	; (8000b5c <HAL_TIM_IC_CaptureCallback+0x164>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a3c      	ldr	r2, [pc, #240]	; (8000b60 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a74:	4a3b      	ldr	r2, [pc, #236]	; (8000b64 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000a76:	6013      	str	r3, [r2, #0]

 // Formattage des espaces de l'affichage
	if (Frequency >=100000)
 8000a78:	4b38      	ldr	r3, [pc, #224]	; (8000b5c <HAL_TIM_IC_CaptureCallback+0x164>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a3a      	ldr	r2, [pc, #232]	; (8000b68 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d908      	bls.n	8000a94 <HAL_TIM_IC_CaptureCallback+0x9c>
		sprintf(Frequency_s,"Frequency= %d Hz  C= %d pF\n",Frequency,Capacity);
 8000a82:	4b36      	ldr	r3, [pc, #216]	; (8000b5c <HAL_TIM_IC_CaptureCallback+0x164>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b37      	ldr	r3, [pc, #220]	; (8000b64 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4938      	ldr	r1, [pc, #224]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0x174>)
 8000a8c:	4838      	ldr	r0, [pc, #224]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000a8e:	f004 f9e3 	bl	8004e58 <siprintf>
 8000a92:	e016      	b.n	8000ac2 <HAL_TIM_IC_CaptureCallback+0xca>
	else if (Frequency >=10000)
 8000a94:	4b31      	ldr	r3, [pc, #196]	; (8000b5c <HAL_TIM_IC_CaptureCallback+0x164>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d908      	bls.n	8000ab2 <HAL_TIM_IC_CaptureCallback+0xba>
		sprintf(Frequency_s,"Frequency= %d Hz  C= %d pF\n",Frequency,Capacity);
 8000aa0:	4b2e      	ldr	r3, [pc, #184]	; (8000b5c <HAL_TIM_IC_CaptureCallback+0x164>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b2f      	ldr	r3, [pc, #188]	; (8000b64 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4930      	ldr	r1, [pc, #192]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0x174>)
 8000aaa:	4831      	ldr	r0, [pc, #196]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000aac:	f004 f9d4 	bl	8004e58 <siprintf>
 8000ab0:	e007      	b.n	8000ac2 <HAL_TIM_IC_CaptureCallback+0xca>
	else
		sprintf(Frequency_s,"Frequency= %d Hz  C= %d pF\n",Frequency,Capacity);
 8000ab2:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <HAL_TIM_IC_CaptureCallback+0x164>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4b2b      	ldr	r3, [pc, #172]	; (8000b64 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	; (8000b6c <HAL_TIM_IC_CaptureCallback+0x174>)
 8000abc:	482c      	ldr	r0, [pc, #176]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000abe:	f004 f9cb 	bl	8004e58 <siprintf>

 // Afficher avec une vitesse 30 fois moins pour la lisibilité
	if(aff++ ==30){
 8000ac2:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	1c5a      	adds	r2, r3, #1
 8000ac8:	492a      	ldr	r1, [pc, #168]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8000aca:	600a      	str	r2, [r1, #0]
 8000acc:	2b1e      	cmp	r3, #30
 8000ace:	d109      	bne.n	8000ae4 <HAL_TIM_IC_CaptureCallback+0xec>
		aff =0;
 8000ad0:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2,Frequency_s,40,1000);
 8000ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ada:	2228      	movs	r2, #40	; 0x28
 8000adc:	4924      	ldr	r1, [pc, #144]	; (8000b70 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000ade:	4826      	ldr	r0, [pc, #152]	; (8000b78 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000ae0:	f003 fdb2 	bl	8004648 <HAL_UART_Transmit>
	}

	// Tester le seuil
	if(Frequency<Seuil_one){
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <HAL_TIM_IC_CaptureCallback+0x164>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <HAL_TIM_IC_CaptureCallback+0x184>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d21b      	bcs.n	8000b28 <HAL_TIM_IC_CaptureCallback+0x130>
		HD44780_SetCursor(0,0);
 8000af0:	2100      	movs	r1, #0
 8000af2:	2000      	movs	r0, #0
 8000af4:	f7ff fc56 	bl	80003a4 <HD44780_SetCursor>
	    HD44780_PrintStr("Un voleur est                                                                   ");
 8000af8:	4821      	ldr	r0, [pc, #132]	; (8000b80 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000afa:	f7ff fcc4 	bl	8000486 <HD44780_PrintStr>
	    HD44780_SetCursor(0,1);
 8000afe:	2101      	movs	r1, #1
 8000b00:	2000      	movs	r0, #0
 8000b02:	f7ff fc4f 	bl	80003a4 <HD44780_SetCursor>
	    HD44780_PrintStr("proche                                                                          ");
 8000b06:	481f      	ldr	r0, [pc, #124]	; (8000b84 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000b08:	f7ff fcbd 	bl	8000486 <HD44780_PrintStr>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2108      	movs	r1, #8
 8000b10:	481d      	ldr	r0, [pc, #116]	; (8000b88 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000b12:	f000 fcfb 	bl	800150c <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2102      	movs	r1, #2
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1e:	f000 fcf5 	bl	800150c <HAL_GPIO_WritePin>
		HD44780_Clear();
 8000b22:	f7ff fc29 	bl	8000378 <HD44780_Clear>
 8000b26:	e004      	b.n	8000b32 <HAL_TIM_IC_CaptureCallback+0x13a>
	}
	else
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2108      	movs	r1, #8
 8000b2c:	4816      	ldr	r0, [pc, #88]	; (8000b88 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000b2e:	f000 fced 	bl	800150c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2102      	movs	r1, #2
 8000b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3a:	f000 fce7 	bl	800150c <HAL_GPIO_WritePin>
	}
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd90      	pop	{r4, r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200001f4 	.word	0x200001f4
 8000b4c:	200001d8 	.word	0x200001d8
 8000b50:	200001f0 	.word	0x200001f0
 8000b54:	200001ec 	.word	0x200001ec
 8000b58:	03d09000 	.word	0x03d09000
 8000b5c:	200001d0 	.word	0x200001d0
 8000b60:	000f4240 	.word	0x000f4240
 8000b64:	200001d4 	.word	0x200001d4
 8000b68:	0001869f 	.word	0x0001869f
 8000b6c:	0800575c 	.word	0x0800575c
 8000b70:	200001fc 	.word	0x200001fc
 8000b74:	200001f8 	.word	0x200001f8
 8000b78:	20000148 	.word	0x20000148
 8000b7c:	20000010 	.word	0x20000010
 8000b80:	08005778 	.word	0x08005778
 8000b84:	080057cc 	.word	0x080057cc
 8000b88:	48000400 	.word	0x48000400

08000b8c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	overflow++;
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b9c:	6013      	str	r3, [r2, #0]
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	200001f0 	.word	0x200001f0

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <HAL_MspInit+0x44>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <HAL_MspInit+0x44>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6193      	str	r3, [r2, #24]
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <HAL_MspInit+0x44>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_MspInit+0x44>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_MspInit+0x44>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be8:	61d3      	str	r3, [r2, #28]
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_MspInit+0x44>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40021000 	.word	0x40021000

08000c08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a18      	ldr	r2, [pc, #96]	; (8000c88 <HAL_I2C_MspInit+0x80>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d129      	bne.n	8000c7e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <HAL_I2C_MspInit+0x84>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <HAL_I2C_MspInit+0x84>)
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c34:	6153      	str	r3, [r2, #20]
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_I2C_MspInit+0x84>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA14     ------> I2C1_SDA
    PA15     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000c42:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c48:	2312      	movs	r3, #18
 8000c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c54:	2304      	movs	r3, #4
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c62:	f000 fae1 	bl	8001228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_I2C_MspInit+0x84>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <HAL_I2C_MspInit+0x84>)
 8000c6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c70:	61d3      	str	r3, [r2, #28]
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_I2C_MspInit+0x84>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c7e:	bf00      	nop
 8000c80:	3728      	adds	r7, #40	; 0x28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40005400 	.word	0x40005400
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cb0:	d130      	bne.n	8000d14 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <HAL_TIM_Base_MspInit+0x8c>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <HAL_TIM_Base_MspInit+0x8c>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	61d3      	str	r3, [r2, #28]
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <HAL_TIM_Base_MspInit+0x8c>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <HAL_TIM_Base_MspInit+0x8c>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	4a13      	ldr	r2, [pc, #76]	; (8000d1c <HAL_TIM_Base_MspInit+0x8c>)
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	6153      	str	r3, [r2, #20]
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <HAL_TIM_Base_MspInit+0x8c>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d00:	f000 fa92 	bl	8001228 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2100      	movs	r1, #0
 8000d08:	201c      	movs	r0, #28
 8000d0a:	f000 fa56 	bl	80011ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d0e:	201c      	movs	r0, #28
 8000d10:	f000 fa6f 	bl	80011f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d14:	bf00      	nop
 8000d16:	3728      	adds	r7, #40	; 0x28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40021000 	.word	0x40021000

08000d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a17      	ldr	r2, [pc, #92]	; (8000d9c <HAL_UART_MspInit+0x7c>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d128      	bne.n	8000d94 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d42:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <HAL_UART_MspInit+0x80>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	4a16      	ldr	r2, [pc, #88]	; (8000da0 <HAL_UART_MspInit+0x80>)
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	61d3      	str	r3, [r2, #28]
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <HAL_UART_MspInit+0x80>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_UART_MspInit+0x80>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <HAL_UART_MspInit+0x80>)
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	6153      	str	r3, [r2, #20]
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_UART_MspInit+0x80>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d72:	230c      	movs	r3, #12
 8000d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d82:	2307      	movs	r3, #7
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d90:	f000 fa4a 	bl	8001228 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d94:	bf00      	nop
 8000d96:	3728      	adds	r7, #40	; 0x28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40004400 	.word	0x40004400
 8000da0:	40021000 	.word	0x40021000

08000da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <NMI_Handler+0x4>

08000daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <HardFault_Handler+0x4>

08000db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <MemManage_Handler+0x4>

08000db6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <BusFault_Handler+0x4>

08000dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <UsageFault_Handler+0x4>

08000dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df0:	f000 f8c4 	bl	8000f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <TIM2_IRQHandler+0x10>)
 8000dfe:	f002 fe31 	bl	8003a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200000fc 	.word	0x200000fc

08000e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e14:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <_sbrk+0x5c>)
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <_sbrk+0x60>)
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <_sbrk+0x64>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <_sbrk+0x68>)
 8000e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d207      	bcs.n	8000e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e3c:	f003 ffda 	bl	8004df4 <__errno>
 8000e40:	4603      	mov	r3, r0
 8000e42:	220c      	movs	r2, #12
 8000e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	e009      	b.n	8000e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <_sbrk+0x64>)
 8000e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20004000 	.word	0x20004000
 8000e6c:	00000400 	.word	0x00000400
 8000e70:	20000224 	.word	0x20000224
 8000e74:	20000240 	.word	0x20000240

08000e78 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <SystemInit+0x20>)
 8000e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e82:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <SystemInit+0x20>)
 8000e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ea0:	f7ff ffea 	bl	8000e78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ea6:	490d      	ldr	r1, [pc, #52]	; (8000edc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ea8:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <LoopForever+0xe>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ebc:	4c0a      	ldr	r4, [pc, #40]	; (8000ee8 <LoopForever+0x16>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eca:	f003 ff99 	bl	8004e00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ece:	f7ff fbc9 	bl	8000664 <main>

08000ed2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ed2:	e7fe      	b.n	8000ed2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ed4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000edc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000ee0:	08005894 	.word	0x08005894
  ldr r2, =_sbss
 8000ee4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000ee8:	2000023c 	.word	0x2000023c

08000eec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC1_IRQHandler>
	...

08000ef0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <HAL_Init+0x28>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <HAL_Init+0x28>)
 8000efa:	f043 0310 	orr.w	r3, r3, #16
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f00:	2003      	movs	r0, #3
 8000f02:	f000 f94f 	bl	80011a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f06:	200f      	movs	r0, #15
 8000f08:	f000 f808 	bl	8000f1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f0c:	f7ff fe58 	bl	8000bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40022000 	.word	0x40022000

08000f1c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_InitTick+0x54>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_InitTick+0x58>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f967 	bl	800120e <HAL_SYSTICK_Config>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00e      	b.n	8000f68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d80a      	bhi.n	8000f66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f000 f92f 	bl	80011ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f5c:	4a06      	ldr	r2, [pc, #24]	; (8000f78 <HAL_InitTick+0x5c>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e000      	b.n	8000f68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000014 	.word	0x20000014
 8000f74:	2000001c 	.word	0x2000001c
 8000f78:	20000018 	.word	0x20000018

08000f7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_IncTick+0x20>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_IncTick+0x24>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <HAL_IncTick+0x24>)
 8000f8e:	6013      	str	r3, [r2, #0]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	2000001c 	.word	0x2000001c
 8000fa0:	20000228 	.word	0x20000228

08000fa4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <HAL_GetTick+0x14>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000228 	.word	0x20000228

08000fbc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc4:	f7ff ffee 	bl	8000fa4 <HAL_GetTick>
 8000fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd4:	d005      	beq.n	8000fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_Delay+0x44>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4413      	add	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000fe2:	bf00      	nop
 8000fe4:	f7ff ffde 	bl	8000fa4 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d8f7      	bhi.n	8000fe4 <HAL_Delay+0x28>
  {
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2000001c 	.word	0x2000001c

08001004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001020:	4013      	ands	r3, r2
 8001022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800102c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001036:	4a04      	ldr	r2, [pc, #16]	; (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	60d3      	str	r3, [r2, #12]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <__NVIC_GetPriorityGrouping+0x18>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	0a1b      	lsrs	r3, r3, #8
 8001056:	f003 0307 	and.w	r3, r3, #7
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	2b00      	cmp	r3, #0
 8001078:	db0b      	blt.n	8001092 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	f003 021f 	and.w	r2, r3, #31
 8001080:	4907      	ldr	r1, [pc, #28]	; (80010a0 <__NVIC_EnableIRQ+0x38>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	095b      	lsrs	r3, r3, #5
 8001088:	2001      	movs	r0, #1
 800108a:	fa00 f202 	lsl.w	r2, r0, r2
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000e100 	.word	0xe000e100

080010a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	6039      	str	r1, [r7, #0]
 80010ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	db0a      	blt.n	80010ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	490c      	ldr	r1, [pc, #48]	; (80010f0 <__NVIC_SetPriority+0x4c>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	0112      	lsls	r2, r2, #4
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	440b      	add	r3, r1
 80010c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010cc:	e00a      	b.n	80010e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4908      	ldr	r1, [pc, #32]	; (80010f4 <__NVIC_SetPriority+0x50>)
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	f003 030f 	and.w	r3, r3, #15
 80010da:	3b04      	subs	r3, #4
 80010dc:	0112      	lsls	r2, r2, #4
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	440b      	add	r3, r1
 80010e2:	761a      	strb	r2, [r3, #24]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000e100 	.word	0xe000e100
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	; 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f1c3 0307 	rsb	r3, r3, #7
 8001112:	2b04      	cmp	r3, #4
 8001114:	bf28      	it	cs
 8001116:	2304      	movcs	r3, #4
 8001118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3304      	adds	r3, #4
 800111e:	2b06      	cmp	r3, #6
 8001120:	d902      	bls.n	8001128 <NVIC_EncodePriority+0x30>
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3b03      	subs	r3, #3
 8001126:	e000      	b.n	800112a <NVIC_EncodePriority+0x32>
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	f04f 32ff 	mov.w	r2, #4294967295
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43da      	mvns	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	401a      	ands	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001140:	f04f 31ff 	mov.w	r1, #4294967295
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa01 f303 	lsl.w	r3, r1, r3
 800114a:	43d9      	mvns	r1, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	4313      	orrs	r3, r2
         );
}
 8001152:	4618      	mov	r0, r3
 8001154:	3724      	adds	r7, #36	; 0x24
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001170:	d301      	bcc.n	8001176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001172:	2301      	movs	r3, #1
 8001174:	e00f      	b.n	8001196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001176:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <SysTick_Config+0x40>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3b01      	subs	r3, #1
 800117c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117e:	210f      	movs	r1, #15
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f7ff ff8e 	bl	80010a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <SysTick_Config+0x40>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <SysTick_Config+0x40>)
 8001190:	2207      	movs	r2, #7
 8001192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	e000e010 	.word	0xe000e010

080011a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ff29 	bl	8001004 <__NVIC_SetPriorityGrouping>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011cc:	f7ff ff3e 	bl	800104c <__NVIC_GetPriorityGrouping>
 80011d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	6978      	ldr	r0, [r7, #20]
 80011d8:	f7ff ff8e 	bl	80010f8 <NVIC_EncodePriority>
 80011dc:	4602      	mov	r2, r0
 80011de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e2:	4611      	mov	r1, r2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff5d 	bl	80010a4 <__NVIC_SetPriority>
}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff31 	bl	8001068 <__NVIC_EnableIRQ>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ffa2 	bl	8001160 <SysTick_Config>
 800121c:	4603      	mov	r3, r0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001228:	b480      	push	{r7}
 800122a:	b087      	sub	sp, #28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001236:	e14e      	b.n	80014d6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	2101      	movs	r1, #1
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	4013      	ands	r3, r2
 8001246:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 8140 	beq.w	80014d0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b01      	cmp	r3, #1
 800125a:	d005      	beq.n	8001268 <HAL_GPIO_Init+0x40>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d130      	bne.n	80012ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800129e:	2201      	movs	r2, #1
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	091b      	lsrs	r3, r3, #4
 80012b4:	f003 0201 	and.w	r2, r3, #1
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d017      	beq.n	8001306 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	2203      	movs	r2, #3
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d123      	bne.n	800135a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	08da      	lsrs	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3208      	adds	r2, #8
 800131a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	220f      	movs	r2, #15
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	691a      	ldr	r2, [r3, #16]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	08da      	lsrs	r2, r3, #3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3208      	adds	r2, #8
 8001354:	6939      	ldr	r1, [r7, #16]
 8001356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	2203      	movs	r2, #3
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 0203 	and.w	r2, r3, #3
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 809a 	beq.w	80014d0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139c:	4b55      	ldr	r3, [pc, #340]	; (80014f4 <HAL_GPIO_Init+0x2cc>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a54      	ldr	r2, [pc, #336]	; (80014f4 <HAL_GPIO_Init+0x2cc>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b52      	ldr	r3, [pc, #328]	; (80014f4 <HAL_GPIO_Init+0x2cc>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013b4:	4a50      	ldr	r2, [pc, #320]	; (80014f8 <HAL_GPIO_Init+0x2d0>)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	089b      	lsrs	r3, r3, #2
 80013ba:	3302      	adds	r3, #2
 80013bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	220f      	movs	r2, #15
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013de:	d013      	beq.n	8001408 <HAL_GPIO_Init+0x1e0>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a46      	ldr	r2, [pc, #280]	; (80014fc <HAL_GPIO_Init+0x2d4>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d00d      	beq.n	8001404 <HAL_GPIO_Init+0x1dc>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a45      	ldr	r2, [pc, #276]	; (8001500 <HAL_GPIO_Init+0x2d8>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d007      	beq.n	8001400 <HAL_GPIO_Init+0x1d8>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a44      	ldr	r2, [pc, #272]	; (8001504 <HAL_GPIO_Init+0x2dc>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d101      	bne.n	80013fc <HAL_GPIO_Init+0x1d4>
 80013f8:	2303      	movs	r3, #3
 80013fa:	e006      	b.n	800140a <HAL_GPIO_Init+0x1e2>
 80013fc:	2305      	movs	r3, #5
 80013fe:	e004      	b.n	800140a <HAL_GPIO_Init+0x1e2>
 8001400:	2302      	movs	r3, #2
 8001402:	e002      	b.n	800140a <HAL_GPIO_Init+0x1e2>
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <HAL_GPIO_Init+0x1e2>
 8001408:	2300      	movs	r3, #0
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	f002 0203 	and.w	r2, r2, #3
 8001410:	0092      	lsls	r2, r2, #2
 8001412:	4093      	lsls	r3, r2
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800141a:	4937      	ldr	r1, [pc, #220]	; (80014f8 <HAL_GPIO_Init+0x2d0>)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	3302      	adds	r3, #2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001428:	4b37      	ldr	r3, [pc, #220]	; (8001508 <HAL_GPIO_Init+0x2e0>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800144c:	4a2e      	ldr	r2, [pc, #184]	; (8001508 <HAL_GPIO_Init+0x2e0>)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001452:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <HAL_GPIO_Init+0x2e0>)
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	43db      	mvns	r3, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001476:	4a24      	ldr	r2, [pc, #144]	; (8001508 <HAL_GPIO_Init+0x2e0>)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800147c:	4b22      	ldr	r3, [pc, #136]	; (8001508 <HAL_GPIO_Init+0x2e0>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	43db      	mvns	r3, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014a0:	4a19      	ldr	r2, [pc, #100]	; (8001508 <HAL_GPIO_Init+0x2e0>)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a6:	4b18      	ldr	r3, [pc, #96]	; (8001508 <HAL_GPIO_Init+0x2e0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014ca:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <HAL_GPIO_Init+0x2e0>)
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	3301      	adds	r3, #1
 80014d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	fa22 f303 	lsr.w	r3, r2, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f47f aea9 	bne.w	8001238 <HAL_GPIO_Init+0x10>
  }
}
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
 80014ea:	371c      	adds	r7, #28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40010000 	.word	0x40010000
 80014fc:	48000400 	.word	0x48000400
 8001500:	48000800 	.word	0x48000800
 8001504:	48000c00 	.word	0x48000c00
 8001508:	40010400 	.word	0x40010400

0800150c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
 8001518:	4613      	mov	r3, r2
 800151a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800151c:	787b      	ldrb	r3, [r7, #1]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001528:	e002      	b.n	8001530 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800152a:	887a      	ldrh	r2, [r7, #2]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e081      	b.n	8001652 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d106      	bne.n	8001568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fb50 	bl	8000c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2224      	movs	r2, #36	; 0x24
 800156c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0201 	bic.w	r2, r2, #1
 800157e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800158c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800159c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d107      	bne.n	80015b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	e006      	b.n	80015c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80015c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d104      	bne.n	80015d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691a      	ldr	r2, [r3, #16]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69d9      	ldr	r1, [r3, #28]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a1a      	ldr	r2, [r3, #32]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0201 	orr.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2220      	movs	r2, #32
 800163e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af02      	add	r7, sp, #8
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	461a      	mov	r2, r3
 8001668:	460b      	mov	r3, r1
 800166a:	817b      	strh	r3, [r7, #10]
 800166c:	4613      	mov	r3, r2
 800166e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b20      	cmp	r3, #32
 800167a:	f040 80da 	bne.w	8001832 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001684:	2b01      	cmp	r3, #1
 8001686:	d101      	bne.n	800168c <HAL_I2C_Master_Transmit+0x30>
 8001688:	2302      	movs	r3, #2
 800168a:	e0d3      	b.n	8001834 <HAL_I2C_Master_Transmit+0x1d8>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001694:	f7ff fc86 	bl	8000fa4 <HAL_GetTick>
 8001698:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2319      	movs	r3, #25
 80016a0:	2201      	movs	r2, #1
 80016a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f000 f8f0 	bl	800188c <I2C_WaitOnFlagUntilTimeout>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e0be      	b.n	8001834 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2221      	movs	r2, #33	; 0x21
 80016ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2210      	movs	r2, #16
 80016c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2200      	movs	r2, #0
 80016ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	893a      	ldrh	r2, [r7, #8]
 80016d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	2bff      	cmp	r3, #255	; 0xff
 80016e6:	d90e      	bls.n	8001706 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	22ff      	movs	r2, #255	; 0xff
 80016ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	8979      	ldrh	r1, [r7, #10]
 80016f6:	4b51      	ldr	r3, [pc, #324]	; (800183c <HAL_I2C_Master_Transmit+0x1e0>)
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 fa7e 	bl	8001c00 <I2C_TransferConfig>
 8001704:	e06c      	b.n	80017e0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800170a:	b29a      	uxth	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001714:	b2da      	uxtb	r2, r3
 8001716:	8979      	ldrh	r1, [r7, #10]
 8001718:	4b48      	ldr	r3, [pc, #288]	; (800183c <HAL_I2C_Master_Transmit+0x1e0>)
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f000 fa6d 	bl	8001c00 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001726:	e05b      	b.n	80017e0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	6a39      	ldr	r1, [r7, #32]
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 f8fc 	bl	800192a <I2C_WaitOnTXISFlagUntilTimeout>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e07b      	b.n	8001834 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	781a      	ldrb	r2, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001756:	b29b      	uxth	r3, r3
 8001758:	3b01      	subs	r3, #1
 800175a:	b29a      	uxth	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001764:	3b01      	subs	r3, #1
 8001766:	b29a      	uxth	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001770:	b29b      	uxth	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d034      	beq.n	80017e0 <HAL_I2C_Master_Transmit+0x184>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177a:	2b00      	cmp	r3, #0
 800177c:	d130      	bne.n	80017e0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	6a3b      	ldr	r3, [r7, #32]
 8001784:	2200      	movs	r2, #0
 8001786:	2180      	movs	r1, #128	; 0x80
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f000 f87f 	bl	800188c <I2C_WaitOnFlagUntilTimeout>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e04d      	b.n	8001834 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179c:	b29b      	uxth	r3, r3
 800179e:	2bff      	cmp	r3, #255	; 0xff
 80017a0:	d90e      	bls.n	80017c0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	22ff      	movs	r2, #255	; 0xff
 80017a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	8979      	ldrh	r1, [r7, #10]
 80017b0:	2300      	movs	r3, #0
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f000 fa21 	bl	8001c00 <I2C_TransferConfig>
 80017be:	e00f      	b.n	80017e0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	8979      	ldrh	r1, [r7, #10]
 80017d2:	2300      	movs	r3, #0
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 fa10 	bl	8001c00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d19e      	bne.n	8001728 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	6a39      	ldr	r1, [r7, #32]
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 f8e2 	bl	80019b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e01a      	b.n	8001834 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2220      	movs	r2, #32
 8001804:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6859      	ldr	r1, [r3, #4]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_I2C_Master_Transmit+0x1e4>)
 8001812:	400b      	ands	r3, r1
 8001814:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2220      	movs	r2, #32
 800181a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	e000      	b.n	8001834 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001832:	2302      	movs	r3, #2
  }
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	80002000 	.word	0x80002000
 8001840:	fe00e800 	.word	0xfe00e800

08001844 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b02      	cmp	r3, #2
 8001858:	d103      	bne.n	8001862 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2200      	movs	r2, #0
 8001860:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b01      	cmp	r3, #1
 800186e:	d007      	beq.n	8001880 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	699a      	ldr	r2, [r3, #24]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0201 	orr.w	r2, r2, #1
 800187e:	619a      	str	r2, [r3, #24]
  }
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	4613      	mov	r3, r2
 800189a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800189c:	e031      	b.n	8001902 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a4:	d02d      	beq.n	8001902 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018a6:	f7ff fb7d 	bl	8000fa4 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d302      	bcc.n	80018bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d122      	bne.n	8001902 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	699a      	ldr	r2, [r3, #24]
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	4013      	ands	r3, r2
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	bf0c      	ite	eq
 80018cc:	2301      	moveq	r3, #1
 80018ce:	2300      	movne	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	461a      	mov	r2, r3
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d113      	bne.n	8001902 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f043 0220 	orr.w	r2, r3, #32
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2220      	movs	r2, #32
 80018ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e00f      	b.n	8001922 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	699a      	ldr	r2, [r3, #24]
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	4013      	ands	r3, r2
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	429a      	cmp	r2, r3
 8001910:	bf0c      	ite	eq
 8001912:	2301      	moveq	r3, #1
 8001914:	2300      	movne	r3, #0
 8001916:	b2db      	uxtb	r3, r3
 8001918:	461a      	mov	r2, r3
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	429a      	cmp	r2, r3
 800191e:	d0be      	beq.n	800189e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001936:	e033      	b.n	80019a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	68b9      	ldr	r1, [r7, #8]
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 f87f 	bl	8001a40 <I2C_IsErrorOccurred>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e031      	b.n	80019b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001952:	d025      	beq.n	80019a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001954:	f7ff fb26 	bl	8000fa4 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	429a      	cmp	r2, r3
 8001962:	d302      	bcc.n	800196a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d11a      	bne.n	80019a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b02      	cmp	r3, #2
 8001976:	d013      	beq.n	80019a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197c:	f043 0220 	orr.w	r2, r3, #32
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2220      	movs	r2, #32
 8001988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e007      	b.n	80019b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d1c4      	bne.n	8001938 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019c4:	e02f      	b.n	8001a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 f838 	bl	8001a40 <I2C_IsErrorOccurred>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e02d      	b.n	8001a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019da:	f7ff fae3 	bl	8000fa4 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d302      	bcc.n	80019f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d11a      	bne.n	8001a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	f003 0320 	and.w	r3, r3, #32
 80019fa:	2b20      	cmp	r3, #32
 80019fc:	d013      	beq.n	8001a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f043 0220 	orr.w	r2, r3, #32
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e007      	b.n	8001a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f003 0320 	and.w	r3, r3, #32
 8001a30:	2b20      	cmp	r3, #32
 8001a32:	d1c8      	bne.n	80019c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	f003 0310 	and.w	r3, r3, #16
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d068      	beq.n	8001b3e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2210      	movs	r2, #16
 8001a72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a74:	e049      	b.n	8001b0a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7c:	d045      	beq.n	8001b0a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a7e:	f7ff fa91 	bl	8000fa4 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	68ba      	ldr	r2, [r7, #8]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d302      	bcc.n	8001a94 <I2C_IsErrorOccurred+0x54>
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d13a      	bne.n	8001b0a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001aa6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ab6:	d121      	bne.n	8001afc <I2C_IsErrorOccurred+0xbc>
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001abe:	d01d      	beq.n	8001afc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001ac0:	7cfb      	ldrb	r3, [r7, #19]
 8001ac2:	2b20      	cmp	r3, #32
 8001ac4:	d01a      	beq.n	8001afc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ad4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ad6:	f7ff fa65 	bl	8000fa4 <HAL_GetTick>
 8001ada:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001adc:	e00e      	b.n	8001afc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001ade:	f7ff fa61 	bl	8000fa4 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b19      	cmp	r3, #25
 8001aea:	d907      	bls.n	8001afc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	f043 0320 	orr.w	r3, r3, #32
 8001af2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001afa:	e006      	b.n	8001b0a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	f003 0320 	and.w	r3, r3, #32
 8001b06:	2b20      	cmp	r3, #32
 8001b08:	d1e9      	bne.n	8001ade <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0320 	and.w	r3, r3, #32
 8001b14:	2b20      	cmp	r3, #32
 8001b16:	d003      	beq.n	8001b20 <I2C_IsErrorOccurred+0xe0>
 8001b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0aa      	beq.n	8001a76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d103      	bne.n	8001b30 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b30:	6a3b      	ldr	r3, [r7, #32]
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00b      	beq.n	8001b68 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00b      	beq.n	8001b8a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	f043 0308 	orr.w	r3, r3, #8
 8001b78:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00b      	beq.n	8001bac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	f043 0302 	orr.w	r3, r3, #2
 8001b9a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ba4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d01c      	beq.n	8001bee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f7ff fe45 	bl	8001844 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6859      	ldr	r1, [r3, #4]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <I2C_IsErrorOccurred+0x1bc>)
 8001bc6:	400b      	ands	r3, r1
 8001bc8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2220      	movs	r2, #32
 8001bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001bee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3728      	adds	r7, #40	; 0x28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	fe00e800 	.word	0xfe00e800

08001c00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b087      	sub	sp, #28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	817b      	strh	r3, [r7, #10]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c12:	897b      	ldrh	r3, [r7, #10]
 8001c14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c18:	7a7b      	ldrb	r3, [r7, #9]
 8001c1a:	041b      	lsls	r3, r3, #16
 8001c1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c20:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c2e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	0d5b      	lsrs	r3, r3, #21
 8001c3a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c3e:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <I2C_TransferConfig+0x60>)
 8001c40:	430b      	orrs	r3, r1
 8001c42:	43db      	mvns	r3, r3
 8001c44:	ea02 0103 	and.w	r1, r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c52:	bf00      	nop
 8001c54:	371c      	adds	r7, #28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	03ff63ff 	.word	0x03ff63ff

08001c64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b20      	cmp	r3, #32
 8001c78:	d138      	bne.n	8001cec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e032      	b.n	8001cee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2224      	movs	r2, #36	; 0x24
 8001c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0201 	bic.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6819      	ldr	r1, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e000      	b.n	8001cee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cec:	2302      	movs	r3, #2
  }
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b085      	sub	sp, #20
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b20      	cmp	r3, #32
 8001d0e:	d139      	bne.n	8001d84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e033      	b.n	8001d86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2224      	movs	r2, #36	; 0x24
 8001d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0201 	bic.w	r2, r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2220      	movs	r2, #32
 8001d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	e000      	b.n	8001d86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d84:	2302      	movs	r3, #2
  }
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001daa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d102      	bne.n	8001dba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	f001 b823 	b.w	8002e00 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 817d 	beq.w	80020ca <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001dd0:	4bbc      	ldr	r3, [pc, #752]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d00c      	beq.n	8001df6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ddc:	4bb9      	ldr	r3, [pc, #740]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d15c      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x10e>
 8001de8:	4bb6      	ldr	r3, [pc, #728]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df4:	d155      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x10e>
 8001df6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dfa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e0a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	095b      	lsrs	r3, r3, #5
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d102      	bne.n	8001e28 <HAL_RCC_OscConfig+0x94>
 8001e22:	4ba8      	ldr	r3, [pc, #672]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	e015      	b.n	8001e54 <HAL_RCC_OscConfig+0xc0>
 8001e28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e2c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e40:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e44:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001e50:	4b9c      	ldr	r3, [pc, #624]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e58:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001e5c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e60:	fa92 f2a2 	rbit	r2, r2
 8001e64:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001e68:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001e6c:	fab2 f282 	clz	r2, r2
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	f042 0220 	orr.w	r2, r2, #32
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	f002 021f 	and.w	r2, r2, #31
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 811f 	beq.w	80020c8 <HAL_RCC_OscConfig+0x334>
 8001e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f040 8116 	bne.w	80020c8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	f000 bfaf 	b.w	8002e00 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb2:	d106      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x12e>
 8001eb4:	4b83      	ldr	r3, [pc, #524]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a82      	ldr	r2, [pc, #520]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	e036      	b.n	8001f30 <HAL_RCC_OscConfig+0x19c>
 8001ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x158>
 8001ed2:	4b7c      	ldr	r3, [pc, #496]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a7b      	ldr	r2, [pc, #492]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	4b79      	ldr	r3, [pc, #484]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a78      	ldr	r2, [pc, #480]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e021      	b.n	8001f30 <HAL_RCC_OscConfig+0x19c>
 8001eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x184>
 8001efe:	4b71      	ldr	r3, [pc, #452]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a70      	ldr	r2, [pc, #448]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	4b6e      	ldr	r3, [pc, #440]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a6d      	ldr	r2, [pc, #436]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e00b      	b.n	8001f30 <HAL_RCC_OscConfig+0x19c>
 8001f18:	4b6a      	ldr	r3, [pc, #424]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a69      	ldr	r2, [pc, #420]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b67      	ldr	r3, [pc, #412]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a66      	ldr	r2, [pc, #408]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f30:	4b64      	ldr	r3, [pc, #400]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	f023 020f 	bic.w	r2, r3, #15
 8001f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	495f      	ldr	r1, [pc, #380]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d059      	beq.n	800200e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7ff f823 	bl	8000fa4 <HAL_GetTick>
 8001f5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f64:	f7ff f81e 	bl	8000fa4 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b64      	cmp	r3, #100	; 0x64
 8001f72:	d902      	bls.n	8001f7a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	f000 bf43 	b.w	8002e00 <HAL_RCC_OscConfig+0x106c>
 8001f7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f7e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001f8e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	095b      	lsrs	r3, r3, #5
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d102      	bne.n	8001fac <HAL_RCC_OscConfig+0x218>
 8001fa6:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	e015      	b.n	8001fd8 <HAL_RCC_OscConfig+0x244>
 8001fac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001fc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001fc8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001fcc:	fa93 f3a3 	rbit	r3, r3
 8001fd0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001fd4:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fdc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001fe0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001fe4:	fa92 f2a2 	rbit	r2, r2
 8001fe8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001fec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001ff0:	fab2 f282 	clz	r2, r2
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	f042 0220 	orr.w	r2, r2, #32
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	f002 021f 	and.w	r2, r2, #31
 8002000:	2101      	movs	r1, #1
 8002002:	fa01 f202 	lsl.w	r2, r1, r2
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0ab      	beq.n	8001f64 <HAL_RCC_OscConfig+0x1d0>
 800200c:	e05d      	b.n	80020ca <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200e:	f7fe ffc9 	bl	8000fa4 <HAL_GetTick>
 8002012:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002016:	e00a      	b.n	800202e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002018:	f7fe ffc4 	bl	8000fa4 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b64      	cmp	r3, #100	; 0x64
 8002026:	d902      	bls.n	800202e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	f000 bee9 	b.w	8002e00 <HAL_RCC_OscConfig+0x106c>
 800202e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002032:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800203a:	fa93 f3a3 	rbit	r3, r3
 800203e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002042:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	095b      	lsrs	r3, r3, #5
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d102      	bne.n	8002060 <HAL_RCC_OscConfig+0x2cc>
 800205a:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	e015      	b.n	800208c <HAL_RCC_OscConfig+0x2f8>
 8002060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002064:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002068:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800206c:	fa93 f3a3 	rbit	r3, r3
 8002070:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002078:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800207c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002088:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <HAL_RCC_OscConfig+0x330>)
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002090:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002094:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002098:	fa92 f2a2 	rbit	r2, r2
 800209c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80020a0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80020a4:	fab2 f282 	clz	r2, r2
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	f042 0220 	orr.w	r2, r2, #32
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	f002 021f 	and.w	r2, r2, #31
 80020b4:	2101      	movs	r1, #1
 80020b6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1ab      	bne.n	8002018 <HAL_RCC_OscConfig+0x284>
 80020c0:	e003      	b.n	80020ca <HAL_RCC_OscConfig+0x336>
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 817d 	beq.w	80023da <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020e0:	4ba6      	ldr	r3, [pc, #664]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00b      	beq.n	8002104 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020ec:	4ba3      	ldr	r3, [pc, #652]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d172      	bne.n	80021de <HAL_RCC_OscConfig+0x44a>
 80020f8:	4ba0      	ldr	r3, [pc, #640]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d16c      	bne.n	80021de <HAL_RCC_OscConfig+0x44a>
 8002104:	2302      	movs	r3, #2
 8002106:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002116:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211a:	fab3 f383 	clz	r3, r3
 800211e:	b2db      	uxtb	r3, r3
 8002120:	095b      	lsrs	r3, r3, #5
 8002122:	b2db      	uxtb	r3, r3
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b01      	cmp	r3, #1
 800212c:	d102      	bne.n	8002134 <HAL_RCC_OscConfig+0x3a0>
 800212e:	4b93      	ldr	r3, [pc, #588]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	e013      	b.n	800215c <HAL_RCC_OscConfig+0x3c8>
 8002134:	2302      	movs	r3, #2
 8002136:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002146:	2302      	movs	r3, #2
 8002148:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800214c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002158:	4b88      	ldr	r3, [pc, #544]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	2202      	movs	r2, #2
 800215e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002162:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002166:	fa92 f2a2 	rbit	r2, r2
 800216a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800216e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002172:	fab2 f282 	clz	r2, r2
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	f042 0220 	orr.w	r2, r2, #32
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	f002 021f 	and.w	r2, r2, #31
 8002182:	2101      	movs	r1, #1
 8002184:	fa01 f202 	lsl.w	r2, r1, r2
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00a      	beq.n	80021a4 <HAL_RCC_OscConfig+0x410>
 800218e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002192:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d002      	beq.n	80021a4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	f000 be2e 	b.w	8002e00 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a4:	4b75      	ldr	r3, [pc, #468]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	21f8      	movs	r1, #248	; 0xf8
 80021ba:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80021c2:	fa91 f1a1 	rbit	r1, r1
 80021c6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80021ca:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80021ce:	fab1 f181 	clz	r1, r1
 80021d2:	b2c9      	uxtb	r1, r1
 80021d4:	408b      	lsls	r3, r1
 80021d6:	4969      	ldr	r1, [pc, #420]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021dc:	e0fd      	b.n	80023da <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8088 	beq.w	8002300 <HAL_RCC_OscConfig+0x56c>
 80021f0:	2301      	movs	r3, #1
 80021f2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002202:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002210:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	461a      	mov	r2, r3
 8002218:	2301      	movs	r3, #1
 800221a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe fec2 	bl	8000fa4 <HAL_GetTick>
 8002220:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002224:	e00a      	b.n	800223c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002226:	f7fe febd 	bl	8000fa4 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d902      	bls.n	800223c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	f000 bde2 	b.w	8002e00 <HAL_RCC_OscConfig+0x106c>
 800223c:	2302      	movs	r3, #2
 800223e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800224e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	095b      	lsrs	r3, r3, #5
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d102      	bne.n	800226c <HAL_RCC_OscConfig+0x4d8>
 8002266:	4b45      	ldr	r3, [pc, #276]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	e013      	b.n	8002294 <HAL_RCC_OscConfig+0x500>
 800226c:	2302      	movs	r3, #2
 800226e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800227e:	2302      	movs	r3, #2
 8002280:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002284:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002290:	4b3a      	ldr	r3, [pc, #232]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	2202      	movs	r2, #2
 8002296:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800229a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800229e:	fa92 f2a2 	rbit	r2, r2
 80022a2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80022a6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80022aa:	fab2 f282 	clz	r2, r2
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	f042 0220 	orr.w	r2, r2, #32
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	f002 021f 	and.w	r2, r2, #31
 80022ba:	2101      	movs	r1, #1
 80022bc:	fa01 f202 	lsl.w	r2, r1, r2
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0af      	beq.n	8002226 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c6:	4b2d      	ldr	r3, [pc, #180]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	21f8      	movs	r1, #248	; 0xf8
 80022dc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80022e4:	fa91 f1a1 	rbit	r1, r1
 80022e8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80022ec:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80022f0:	fab1 f181 	clz	r1, r1
 80022f4:	b2c9      	uxtb	r1, r1
 80022f6:	408b      	lsls	r3, r1
 80022f8:	4920      	ldr	r1, [pc, #128]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]
 80022fe:	e06c      	b.n	80023da <HAL_RCC_OscConfig+0x646>
 8002300:	2301      	movs	r3, #1
 8002302:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002312:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002320:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	461a      	mov	r2, r3
 8002328:	2300      	movs	r3, #0
 800232a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7fe fe3a 	bl	8000fa4 <HAL_GetTick>
 8002330:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002334:	e00a      	b.n	800234c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002336:	f7fe fe35 	bl	8000fa4 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d902      	bls.n	800234c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	f000 bd5a 	b.w	8002e00 <HAL_RCC_OscConfig+0x106c>
 800234c:	2302      	movs	r3, #2
 800234e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800235e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	095b      	lsrs	r3, r3, #5
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b01      	cmp	r3, #1
 8002374:	d104      	bne.n	8002380 <HAL_RCC_OscConfig+0x5ec>
 8002376:	4b01      	ldr	r3, [pc, #4]	; (800237c <HAL_RCC_OscConfig+0x5e8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	e015      	b.n	80023a8 <HAL_RCC_OscConfig+0x614>
 800237c:	40021000 	.word	0x40021000
 8002380:	2302      	movs	r3, #2
 8002382:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002392:	2302      	movs	r3, #2
 8002394:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002398:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80023a4:	4bc8      	ldr	r3, [pc, #800]	; (80026c8 <HAL_RCC_OscConfig+0x934>)
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	2202      	movs	r2, #2
 80023aa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80023ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80023b2:	fa92 f2a2 	rbit	r2, r2
 80023b6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80023ba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80023be:	fab2 f282 	clz	r2, r2
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	f042 0220 	orr.w	r2, r2, #32
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	f002 021f 	and.w	r2, r2, #31
 80023ce:	2101      	movs	r1, #1
 80023d0:	fa01 f202 	lsl.w	r2, r1, r2
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1ad      	bne.n	8002336 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 8110 	beq.w	8002610 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d079      	beq.n	80024f4 <HAL_RCC_OscConfig+0x760>
 8002400:	2301      	movs	r3, #1
 8002402:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002412:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	4bab      	ldr	r3, [pc, #684]	; (80026cc <HAL_RCC_OscConfig+0x938>)
 8002420:	4413      	add	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	461a      	mov	r2, r3
 8002426:	2301      	movs	r3, #1
 8002428:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242a:	f7fe fdbb 	bl	8000fa4 <HAL_GetTick>
 800242e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002432:	e00a      	b.n	800244a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002434:	f7fe fdb6 	bl	8000fa4 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d902      	bls.n	800244a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	f000 bcdb 	b.w	8002e00 <HAL_RCC_OscConfig+0x106c>
 800244a:	2302      	movs	r3, #2
 800244c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800245c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002460:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002464:	2202      	movs	r2, #2
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	fa93 f2a3 	rbit	r2, r3
 8002476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002488:	2202      	movs	r2, #2
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	fa93 f2a3 	rbit	r2, r3
 800249a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024a2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a4:	4b88      	ldr	r3, [pc, #544]	; (80026c8 <HAL_RCC_OscConfig+0x934>)
 80024a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80024b0:	2102      	movs	r1, #2
 80024b2:	6019      	str	r1, [r3, #0]
 80024b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	fa93 f1a3 	rbit	r1, r3
 80024c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80024ca:	6019      	str	r1, [r3, #0]
  return result;
 80024cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f003 031f 	and.w	r3, r3, #31
 80024e6:	2101      	movs	r1, #1
 80024e8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0a0      	beq.n	8002434 <HAL_RCC_OscConfig+0x6a0>
 80024f2:	e08d      	b.n	8002610 <HAL_RCC_OscConfig+0x87c>
 80024f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024fc:	2201      	movs	r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002504:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	fa93 f2a3 	rbit	r2, r3
 800250e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002512:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002516:	601a      	str	r2, [r3, #0]
  return result;
 8002518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002520:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	4b68      	ldr	r3, [pc, #416]	; (80026cc <HAL_RCC_OscConfig+0x938>)
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	461a      	mov	r2, r3
 8002532:	2300      	movs	r3, #0
 8002534:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002536:	f7fe fd35 	bl	8000fa4 <HAL_GetTick>
 800253a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253e:	e00a      	b.n	8002556 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002540:	f7fe fd30 	bl	8000fa4 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d902      	bls.n	8002556 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	f000 bc55 	b.w	8002e00 <HAL_RCC_OscConfig+0x106c>
 8002556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800255e:	2202      	movs	r2, #2
 8002560:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002566:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	fa93 f2a3 	rbit	r2, r3
 8002570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002574:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002582:	2202      	movs	r2, #2
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	fa93 f2a3 	rbit	r2, r3
 8002594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002598:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80025a6:	2202      	movs	r2, #2
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	fa93 f2a3 	rbit	r2, r3
 80025b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80025c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c2:	4b41      	ldr	r3, [pc, #260]	; (80026c8 <HAL_RCC_OscConfig+0x934>)
 80025c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80025ce:	2102      	movs	r1, #2
 80025d0:	6019      	str	r1, [r3, #0]
 80025d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	fa93 f1a3 	rbit	r1, r3
 80025e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80025e8:	6019      	str	r1, [r3, #0]
  return result;
 80025ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	fab3 f383 	clz	r3, r3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	f003 031f 	and.w	r3, r3, #31
 8002604:	2101      	movs	r1, #1
 8002606:	fa01 f303 	lsl.w	r3, r1, r3
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d197      	bne.n	8002540 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002614:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 81a1 	beq.w	8002968 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002626:	2300      	movs	r3, #0
 8002628:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800262c:	4b26      	ldr	r3, [pc, #152]	; (80026c8 <HAL_RCC_OscConfig+0x934>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d116      	bne.n	8002666 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002638:	4b23      	ldr	r3, [pc, #140]	; (80026c8 <HAL_RCC_OscConfig+0x934>)
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	4a22      	ldr	r2, [pc, #136]	; (80026c8 <HAL_RCC_OscConfig+0x934>)
 800263e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002642:	61d3      	str	r3, [r2, #28]
 8002644:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <HAL_RCC_OscConfig+0x934>)
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800264c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002650:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800265e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002660:	2301      	movs	r3, #1
 8002662:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002666:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <HAL_RCC_OscConfig+0x93c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d11a      	bne.n	80026a8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002672:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <HAL_RCC_OscConfig+0x93c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a16      	ldr	r2, [pc, #88]	; (80026d0 <HAL_RCC_OscConfig+0x93c>)
 8002678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267e:	f7fe fc91 	bl	8000fa4 <HAL_GetTick>
 8002682:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002686:	e009      	b.n	800269c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002688:	f7fe fc8c 	bl	8000fa4 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b64      	cmp	r3, #100	; 0x64
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e3b1      	b.n	8002e00 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <HAL_RCC_OscConfig+0x93c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ef      	beq.n	8002688 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d10d      	bne.n	80026d4 <HAL_RCC_OscConfig+0x940>
 80026b8:	4b03      	ldr	r3, [pc, #12]	; (80026c8 <HAL_RCC_OscConfig+0x934>)
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	4a02      	ldr	r2, [pc, #8]	; (80026c8 <HAL_RCC_OscConfig+0x934>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	6213      	str	r3, [r2, #32]
 80026c4:	e03c      	b.n	8002740 <HAL_RCC_OscConfig+0x9ac>
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000
 80026cc:	10908120 	.word	0x10908120
 80026d0:	40007000 	.word	0x40007000
 80026d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10c      	bne.n	80026fe <HAL_RCC_OscConfig+0x96a>
 80026e4:	4bc1      	ldr	r3, [pc, #772]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	4ac0      	ldr	r2, [pc, #768]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 80026ea:	f023 0301 	bic.w	r3, r3, #1
 80026ee:	6213      	str	r3, [r2, #32]
 80026f0:	4bbe      	ldr	r3, [pc, #760]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	4abd      	ldr	r2, [pc, #756]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 80026f6:	f023 0304 	bic.w	r3, r3, #4
 80026fa:	6213      	str	r3, [r2, #32]
 80026fc:	e020      	b.n	8002740 <HAL_RCC_OscConfig+0x9ac>
 80026fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002702:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b05      	cmp	r3, #5
 800270c:	d10c      	bne.n	8002728 <HAL_RCC_OscConfig+0x994>
 800270e:	4bb7      	ldr	r3, [pc, #732]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4ab6      	ldr	r2, [pc, #728]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 8002714:	f043 0304 	orr.w	r3, r3, #4
 8002718:	6213      	str	r3, [r2, #32]
 800271a:	4bb4      	ldr	r3, [pc, #720]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4ab3      	ldr	r2, [pc, #716]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6213      	str	r3, [r2, #32]
 8002726:	e00b      	b.n	8002740 <HAL_RCC_OscConfig+0x9ac>
 8002728:	4bb0      	ldr	r3, [pc, #704]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	4aaf      	ldr	r2, [pc, #700]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 800272e:	f023 0301 	bic.w	r3, r3, #1
 8002732:	6213      	str	r3, [r2, #32]
 8002734:	4bad      	ldr	r3, [pc, #692]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	4aac      	ldr	r2, [pc, #688]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 800273a:	f023 0304 	bic.w	r3, r3, #4
 800273e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002744:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 8081 	beq.w	8002854 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002752:	f7fe fc27 	bl	8000fa4 <HAL_GetTick>
 8002756:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275a:	e00b      	b.n	8002774 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800275c:	f7fe fc22 	bl	8000fa4 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	f241 3288 	movw	r2, #5000	; 0x1388
 800276c:	4293      	cmp	r3, r2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e345      	b.n	8002e00 <HAL_RCC_OscConfig+0x106c>
 8002774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002778:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800277c:	2202      	movs	r2, #2
 800277e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002784:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	fa93 f2a3 	rbit	r2, r3
 800278e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002792:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80027a0:	2202      	movs	r2, #2
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	fa93 f2a3 	rbit	r2, r3
 80027b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80027ba:	601a      	str	r2, [r3, #0]
  return result;
 80027bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80027c4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f043 0302 	orr.w	r3, r3, #2
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d102      	bne.n	80027e0 <HAL_RCC_OscConfig+0xa4c>
 80027da:	4b84      	ldr	r3, [pc, #528]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	e013      	b.n	8002808 <HAL_RCC_OscConfig+0xa74>
 80027e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027e8:	2202      	movs	r2, #2
 80027ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	fa93 f2a3 	rbit	r2, r3
 80027fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	4b79      	ldr	r3, [pc, #484]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800280c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002810:	2102      	movs	r1, #2
 8002812:	6011      	str	r1, [r2, #0]
 8002814:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002818:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	fa92 f1a2 	rbit	r1, r2
 8002822:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002826:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800282a:	6011      	str	r1, [r2, #0]
  return result;
 800282c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002830:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	fab2 f282 	clz	r2, r2
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	f002 021f 	and.w	r2, r2, #31
 8002846:	2101      	movs	r1, #1
 8002848:	fa01 f202 	lsl.w	r2, r1, r2
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d084      	beq.n	800275c <HAL_RCC_OscConfig+0x9c8>
 8002852:	e07f      	b.n	8002954 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002854:	f7fe fba6 	bl	8000fa4 <HAL_GetTick>
 8002858:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285c:	e00b      	b.n	8002876 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7fe fba1 	bl	8000fa4 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	; 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e2c4      	b.n	8002e00 <HAL_RCC_OscConfig+0x106c>
 8002876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800287e:	2202      	movs	r2, #2
 8002880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002886:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	fa93 f2a3 	rbit	r2, r3
 8002890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002894:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80028a2:	2202      	movs	r2, #2
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	fa93 f2a3 	rbit	r2, r3
 80028b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80028bc:	601a      	str	r2, [r3, #0]
  return result;
 80028be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80028c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c8:	fab3 f383 	clz	r3, r3
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f043 0302 	orr.w	r3, r3, #2
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d102      	bne.n	80028e2 <HAL_RCC_OscConfig+0xb4e>
 80028dc:	4b43      	ldr	r3, [pc, #268]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	e013      	b.n	800290a <HAL_RCC_OscConfig+0xb76>
 80028e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028ea:	2202      	movs	r2, #2
 80028ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	fa93 f2a3 	rbit	r2, r3
 80028fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002900:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	4b39      	ldr	r3, [pc, #228]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800290e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002912:	2102      	movs	r1, #2
 8002914:	6011      	str	r1, [r2, #0]
 8002916:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800291a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	fa92 f1a2 	rbit	r1, r2
 8002924:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002928:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800292c:	6011      	str	r1, [r2, #0]
  return result;
 800292e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002932:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	fab2 f282 	clz	r2, r2
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	f002 021f 	and.w	r2, r2, #31
 8002948:	2101      	movs	r1, #1
 800294a:	fa01 f202 	lsl.w	r2, r1, r2
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d184      	bne.n	800285e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002954:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002958:	2b01      	cmp	r3, #1
 800295a:	d105      	bne.n	8002968 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800295c:	4b23      	ldr	r3, [pc, #140]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	4a22      	ldr	r2, [pc, #136]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 8002962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002966:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 8242 	beq.w	8002dfe <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800297a:	4b1c      	ldr	r3, [pc, #112]	; (80029ec <HAL_RCC_OscConfig+0xc58>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b08      	cmp	r3, #8
 8002984:	f000 8213 	beq.w	8002dae <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	2b02      	cmp	r3, #2
 8002996:	f040 8162 	bne.w	8002c5e <HAL_RCC_OscConfig+0xeca>
 800299a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80029a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ac:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	fa93 f2a3 	rbit	r2, r3
 80029b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ba:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80029be:	601a      	str	r2, [r3, #0]
  return result;
 80029c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80029c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	461a      	mov	r2, r3
 80029dc:	2300      	movs	r3, #0
 80029de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7fe fae0 	bl	8000fa4 <HAL_GetTick>
 80029e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e8:	e00c      	b.n	8002a04 <HAL_RCC_OscConfig+0xc70>
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f0:	f7fe fad8 	bl	8000fa4 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e1fd      	b.n	8002e00 <HAL_RCC_OscConfig+0x106c>
 8002a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a08:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002a0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a16:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	fa93 f2a3 	rbit	r2, r3
 8002a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a24:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a28:	601a      	str	r2, [r3, #0]
  return result;
 8002a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a32:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d102      	bne.n	8002a4e <HAL_RCC_OscConfig+0xcba>
 8002a48:	4bb0      	ldr	r3, [pc, #704]	; (8002d0c <HAL_RCC_OscConfig+0xf78>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	e027      	b.n	8002a9e <HAL_RCC_OscConfig+0xd0a>
 8002a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a52:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a60:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	fa93 f2a3 	rbit	r2, r3
 8002a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a78:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a86:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	fa93 f2a3 	rbit	r2, r3
 8002a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a94:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	4b9c      	ldr	r3, [pc, #624]	; (8002d0c <HAL_RCC_OscConfig+0xf78>)
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aa2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002aa6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002aaa:	6011      	str	r1, [r2, #0]
 8002aac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ab0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	fa92 f1a2 	rbit	r1, r2
 8002aba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002abe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002ac2:	6011      	str	r1, [r2, #0]
  return result;
 8002ac4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ac8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002acc:	6812      	ldr	r2, [r2, #0]
 8002ace:	fab2 f282 	clz	r2, r2
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	f042 0220 	orr.w	r2, r2, #32
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	f002 021f 	and.w	r2, r2, #31
 8002ade:	2101      	movs	r1, #1
 8002ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d182      	bne.n	80029f0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aea:	4b88      	ldr	r3, [pc, #544]	; (8002d0c <HAL_RCC_OscConfig+0xf78>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	430b      	orrs	r3, r1
 8002b0c:	497f      	ldr	r1, [pc, #508]	; (8002d0c <HAL_RCC_OscConfig+0xf78>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	604b      	str	r3, [r1, #4]
 8002b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b16:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b24:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	fa93 f2a3 	rbit	r2, r3
 8002b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b32:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b36:	601a      	str	r2, [r3, #0]
  return result;
 8002b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b40:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	461a      	mov	r2, r3
 8002b54:	2301      	movs	r3, #1
 8002b56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7fe fa24 	bl	8000fa4 <HAL_GetTick>
 8002b5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b60:	e009      	b.n	8002b76 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b62:	f7fe fa1f 	bl	8000fa4 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e144      	b.n	8002e00 <HAL_RCC_OscConfig+0x106c>
 8002b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b88:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	fa93 f2a3 	rbit	r2, r3
 8002b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b96:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b9a:	601a      	str	r2, [r3, #0]
  return result;
 8002b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ba4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	095b      	lsrs	r3, r3, #5
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d102      	bne.n	8002bc0 <HAL_RCC_OscConfig+0xe2c>
 8002bba:	4b54      	ldr	r3, [pc, #336]	; (8002d0c <HAL_RCC_OscConfig+0xf78>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	e027      	b.n	8002c10 <HAL_RCC_OscConfig+0xe7c>
 8002bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002bc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	fa93 f2a3 	rbit	r2, r3
 8002bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bea:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002bee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	fa93 f2a3 	rbit	r2, r3
 8002c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c06:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	4b3f      	ldr	r3, [pc, #252]	; (8002d0c <HAL_RCC_OscConfig+0xf78>)
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c14:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002c18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c1c:	6011      	str	r1, [r2, #0]
 8002c1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c22:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	fa92 f1a2 	rbit	r1, r2
 8002c2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c30:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c34:	6011      	str	r1, [r2, #0]
  return result;
 8002c36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c3a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	fab2 f282 	clz	r2, r2
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	f042 0220 	orr.w	r2, r2, #32
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	f002 021f 	and.w	r2, r2, #31
 8002c50:	2101      	movs	r1, #1
 8002c52:	fa01 f202 	lsl.w	r2, r1, r2
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d082      	beq.n	8002b62 <HAL_RCC_OscConfig+0xdce>
 8002c5c:	e0cf      	b.n	8002dfe <HAL_RCC_OscConfig+0x106a>
 8002c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c62:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c70:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	fa93 f2a3 	rbit	r2, r3
 8002c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c82:	601a      	str	r2, [r3, #0]
  return result;
 8002c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c88:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c8c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7fe f97e 	bl	8000fa4 <HAL_GetTick>
 8002ca8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cac:	e009      	b.n	8002cc2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cae:	f7fe f979 	bl	8000fa4 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e09e      	b.n	8002e00 <HAL_RCC_OscConfig+0x106c>
 8002cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002cca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	fa93 f2a3 	rbit	r2, r3
 8002cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002ce6:	601a      	str	r2, [r3, #0]
  return result;
 8002ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cec:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002cf0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cf2:	fab3 f383 	clz	r3, r3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d104      	bne.n	8002d10 <HAL_RCC_OscConfig+0xf7c>
 8002d06:	4b01      	ldr	r3, [pc, #4]	; (8002d0c <HAL_RCC_OscConfig+0xf78>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	e029      	b.n	8002d60 <HAL_RCC_OscConfig+0xfcc>
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d14:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d22:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	fa93 f2a3 	rbit	r2, r3
 8002d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d30:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d48:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	fa93 f2a3 	rbit	r2, r3
 8002d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d56:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	4b2b      	ldr	r3, [pc, #172]	; (8002e0c <HAL_RCC_OscConfig+0x1078>)
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d64:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d6c:	6011      	str	r1, [r2, #0]
 8002d6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d72:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	fa92 f1a2 	rbit	r1, r2
 8002d7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d80:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d84:	6011      	str	r1, [r2, #0]
  return result;
 8002d86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d8a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	fab2 f282 	clz	r2, r2
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	f042 0220 	orr.w	r2, r2, #32
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	f002 021f 	and.w	r2, r2, #31
 8002da0:	2101      	movs	r1, #1
 8002da2:	fa01 f202 	lsl.w	r2, r1, r2
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d180      	bne.n	8002cae <HAL_RCC_OscConfig+0xf1a>
 8002dac:	e027      	b.n	8002dfe <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e01e      	b.n	8002e00 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dc2:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <HAL_RCC_OscConfig+0x1078>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002dca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002dce:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d10b      	bne.n	8002dfa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002de2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002de6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d001      	beq.n	8002dfe <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000

08002e10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b09e      	sub	sp, #120	; 0x78
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e162      	b.n	80030ee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e28:	4b90      	ldr	r3, [pc, #576]	; (800306c <HAL_RCC_ClockConfig+0x25c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d910      	bls.n	8002e58 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e36:	4b8d      	ldr	r3, [pc, #564]	; (800306c <HAL_RCC_ClockConfig+0x25c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f023 0207 	bic.w	r2, r3, #7
 8002e3e:	498b      	ldr	r1, [pc, #556]	; (800306c <HAL_RCC_ClockConfig+0x25c>)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e46:	4b89      	ldr	r3, [pc, #548]	; (800306c <HAL_RCC_ClockConfig+0x25c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d001      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e14a      	b.n	80030ee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d008      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e64:	4b82      	ldr	r3, [pc, #520]	; (8003070 <HAL_RCC_ClockConfig+0x260>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	497f      	ldr	r1, [pc, #508]	; (8003070 <HAL_RCC_ClockConfig+0x260>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 80dc 	beq.w	800303c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d13c      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xf6>
 8002e8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e90:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e94:	fa93 f3a3 	rbit	r3, r3
 8002e98:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9c:	fab3 f383 	clz	r3, r3
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d102      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xa6>
 8002eb0:	4b6f      	ldr	r3, [pc, #444]	; (8003070 <HAL_RCC_ClockConfig+0x260>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	e00f      	b.n	8002ed6 <HAL_RCC_ClockConfig+0xc6>
 8002eb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	667b      	str	r3, [r7, #100]	; 0x64
 8002ec4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ec8:	663b      	str	r3, [r7, #96]	; 0x60
 8002eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ed2:	4b67      	ldr	r3, [pc, #412]	; (8003070 <HAL_RCC_ClockConfig+0x260>)
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002eda:	65ba      	str	r2, [r7, #88]	; 0x58
 8002edc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ede:	fa92 f2a2 	rbit	r2, r2
 8002ee2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002ee4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ee6:	fab2 f282 	clz	r2, r2
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	f042 0220 	orr.w	r2, r2, #32
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	f002 021f 	and.w	r2, r2, #31
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8002efc:	4013      	ands	r3, r2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d17b      	bne.n	8002ffa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0f3      	b.n	80030ee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d13c      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x178>
 8002f0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f16:	fa93 f3a3 	rbit	r3, r3
 8002f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	095b      	lsrs	r3, r3, #5
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d102      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x128>
 8002f32:	4b4f      	ldr	r3, [pc, #316]	; (8003070 <HAL_RCC_ClockConfig+0x260>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	e00f      	b.n	8002f58 <HAL_RCC_ClockConfig+0x148>
 8002f38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	647b      	str	r3, [r7, #68]	; 0x44
 8002f46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f4a:	643b      	str	r3, [r7, #64]	; 0x40
 8002f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f54:	4b46      	ldr	r3, [pc, #280]	; (8003070 <HAL_RCC_ClockConfig+0x260>)
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f5c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f60:	fa92 f2a2 	rbit	r2, r2
 8002f64:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f68:	fab2 f282 	clz	r2, r2
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	f042 0220 	orr.w	r2, r2, #32
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	f002 021f 	and.w	r2, r2, #31
 8002f78:	2101      	movs	r1, #1
 8002f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d13a      	bne.n	8002ffa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0b2      	b.n	80030ee <HAL_RCC_ClockConfig+0x2de>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d102      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0x1a0>
 8002faa:	4b31      	ldr	r3, [pc, #196]	; (8003070 <HAL_RCC_ClockConfig+0x260>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	e00d      	b.n	8002fcc <HAL_RCC_ClockConfig+0x1bc>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	623b      	str	r3, [r7, #32]
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	4b29      	ldr	r3, [pc, #164]	; (8003070 <HAL_RCC_ClockConfig+0x260>)
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	2202      	movs	r2, #2
 8002fce:	61ba      	str	r2, [r7, #24]
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	fa92 f2a2 	rbit	r2, r2
 8002fd6:	617a      	str	r2, [r7, #20]
  return result;
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	fab2 f282 	clz	r2, r2
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	f042 0220 	orr.w	r2, r2, #32
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	f002 021f 	and.w	r2, r2, #31
 8002fea:	2101      	movs	r1, #1
 8002fec:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e079      	b.n	80030ee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ffa:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <HAL_RCC_ClockConfig+0x260>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f023 0203 	bic.w	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	491a      	ldr	r1, [pc, #104]	; (8003070 <HAL_RCC_ClockConfig+0x260>)
 8003008:	4313      	orrs	r3, r2
 800300a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800300c:	f7fd ffca 	bl	8000fa4 <HAL_GetTick>
 8003010:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	e00a      	b.n	800302a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003014:	f7fd ffc6 	bl	8000fa4 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e061      	b.n	80030ee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302a:	4b11      	ldr	r3, [pc, #68]	; (8003070 <HAL_RCC_ClockConfig+0x260>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 020c 	and.w	r2, r3, #12
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	429a      	cmp	r2, r3
 800303a:	d1eb      	bne.n	8003014 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_RCC_ClockConfig+0x25c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d214      	bcs.n	8003074 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304a:	4b08      	ldr	r3, [pc, #32]	; (800306c <HAL_RCC_ClockConfig+0x25c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 0207 	bic.w	r2, r3, #7
 8003052:	4906      	ldr	r1, [pc, #24]	; (800306c <HAL_RCC_ClockConfig+0x25c>)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305a:	4b04      	ldr	r3, [pc, #16]	; (800306c <HAL_RCC_ClockConfig+0x25c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d005      	beq.n	8003074 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e040      	b.n	80030ee <HAL_RCC_ClockConfig+0x2de>
 800306c:	40022000 	.word	0x40022000
 8003070:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003080:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <HAL_RCC_ClockConfig+0x2e8>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	491a      	ldr	r1, [pc, #104]	; (80030f8 <HAL_RCC_ClockConfig+0x2e8>)
 800308e:	4313      	orrs	r3, r2
 8003090:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d009      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800309e:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <HAL_RCC_ClockConfig+0x2e8>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4912      	ldr	r1, [pc, #72]	; (80030f8 <HAL_RCC_ClockConfig+0x2e8>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030b2:	f000 f85d 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 80030b6:	4601      	mov	r1, r0
 80030b8:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <HAL_RCC_ClockConfig+0x2e8>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030c0:	22f0      	movs	r2, #240	; 0xf0
 80030c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	fa92 f2a2 	rbit	r2, r2
 80030ca:	60fa      	str	r2, [r7, #12]
  return result;
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	fab2 f282 	clz	r2, r2
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	40d3      	lsrs	r3, r2
 80030d6:	4a09      	ldr	r2, [pc, #36]	; (80030fc <HAL_RCC_ClockConfig+0x2ec>)
 80030d8:	5cd3      	ldrb	r3, [r2, r3]
 80030da:	fa21 f303 	lsr.w	r3, r1, r3
 80030de:	4a08      	ldr	r2, [pc, #32]	; (8003100 <HAL_RCC_ClockConfig+0x2f0>)
 80030e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80030e2:	4b08      	ldr	r3, [pc, #32]	; (8003104 <HAL_RCC_ClockConfig+0x2f4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd ff18 	bl	8000f1c <HAL_InitTick>
  
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3778      	adds	r7, #120	; 0x78
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000
 80030fc:	08005820 	.word	0x08005820
 8003100:	20000014 	.word	0x20000014
 8003104:	20000018 	.word	0x20000018

08003108 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	; 0x28
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8003114:	2302      	movs	r3, #2
 8003116:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003118:	2303      	movs	r3, #3
 800311a:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 800311c:	2300      	movs	r3, #0
 800311e:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8003120:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003124:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 8003126:	2300      	movs	r3, #0
 8003128:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <HAL_RCC_MCOConfig+0x64>)
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	4a0f      	ldr	r2, [pc, #60]	; (800316c <HAL_RCC_MCOConfig+0x64>)
 8003130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003134:	6153      	str	r3, [r2, #20]
 8003136:	4b0d      	ldr	r3, [pc, #52]	; (800316c <HAL_RCC_MCOConfig+0x64>)
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8003142:	f107 0314 	add.w	r3, r7, #20
 8003146:	4619      	mov	r1, r3
 8003148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800314c:	f7fe f86c 	bl	8001228 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_RCC_MCOConfig+0x64>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	430b      	orrs	r3, r1
 800315e:	4903      	ldr	r1, [pc, #12]	; (800316c <HAL_RCC_MCOConfig+0x64>)
 8003160:	4313      	orrs	r3, r2
 8003162:	604b      	str	r3, [r1, #4]
}
 8003164:	bf00      	nop
 8003166:	3728      	adds	r7, #40	; 0x28
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40021000 	.word	0x40021000

08003170 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003170:	b480      	push	{r7}
 8003172:	b08b      	sub	sp, #44	; 0x2c
 8003174:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
 800317a:	2300      	movs	r3, #0
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	2300      	movs	r3, #0
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003186:	2300      	movs	r3, #0
 8003188:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800318a:	4b29      	ldr	r3, [pc, #164]	; (8003230 <HAL_RCC_GetSysClockFreq+0xc0>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f003 030c 	and.w	r3, r3, #12
 8003196:	2b04      	cmp	r3, #4
 8003198:	d002      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0x30>
 800319a:	2b08      	cmp	r3, #8
 800319c:	d003      	beq.n	80031a6 <HAL_RCC_GetSysClockFreq+0x36>
 800319e:	e03c      	b.n	800321a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031a0:	4b24      	ldr	r3, [pc, #144]	; (8003234 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031a2:	623b      	str	r3, [r7, #32]
      break;
 80031a4:	e03c      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80031ac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80031b0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	fa92 f2a2 	rbit	r2, r2
 80031b8:	607a      	str	r2, [r7, #4]
  return result;
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	fab2 f282 	clz	r2, r2
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	40d3      	lsrs	r3, r2
 80031c4:	4a1c      	ldr	r2, [pc, #112]	; (8003238 <HAL_RCC_GetSysClockFreq+0xc8>)
 80031c6:	5cd3      	ldrb	r3, [r2, r3]
 80031c8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80031ca:	4b19      	ldr	r3, [pc, #100]	; (8003230 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	220f      	movs	r2, #15
 80031d4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	fa92 f2a2 	rbit	r2, r2
 80031dc:	60fa      	str	r2, [r7, #12]
  return result;
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	fab2 f282 	clz	r2, r2
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	40d3      	lsrs	r3, r2
 80031e8:	4a14      	ldr	r2, [pc, #80]	; (800323c <HAL_RCC_GetSysClockFreq+0xcc>)
 80031ea:	5cd3      	ldrb	r3, [r2, r3]
 80031ec:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031f8:	4a0e      	ldr	r2, [pc, #56]	; (8003234 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
 8003208:	e004      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	4a0c      	ldr	r2, [pc, #48]	; (8003240 <HAL_RCC_GetSysClockFreq+0xd0>)
 800320e:	fb02 f303 	mul.w	r3, r2, r3
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	623b      	str	r3, [r7, #32]
      break;
 8003218:	e002      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <HAL_RCC_GetSysClockFreq+0xc4>)
 800321c:	623b      	str	r3, [r7, #32]
      break;
 800321e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003220:	6a3b      	ldr	r3, [r7, #32]
}
 8003222:	4618      	mov	r0, r3
 8003224:	372c      	adds	r7, #44	; 0x2c
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000
 8003234:	007a1200 	.word	0x007a1200
 8003238:	08005838 	.word	0x08005838
 800323c:	08005848 	.word	0x08005848
 8003240:	003d0900 	.word	0x003d0900

08003244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003248:	4b03      	ldr	r3, [pc, #12]	; (8003258 <HAL_RCC_GetHCLKFreq+0x14>)
 800324a:	681b      	ldr	r3, [r3, #0]
}
 800324c:	4618      	mov	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	20000014 	.word	0x20000014

0800325c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003262:	f7ff ffef 	bl	8003244 <HAL_RCC_GetHCLKFreq>
 8003266:	4601      	mov	r1, r0
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003270:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003274:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	fa92 f2a2 	rbit	r2, r2
 800327c:	603a      	str	r2, [r7, #0]
  return result;
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	fab2 f282 	clz	r2, r2
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	40d3      	lsrs	r3, r2
 8003288:	4a04      	ldr	r2, [pc, #16]	; (800329c <HAL_RCC_GetPCLK1Freq+0x40>)
 800328a:	5cd3      	ldrb	r3, [r2, r3]
 800328c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003290:	4618      	mov	r0, r3
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40021000 	.word	0x40021000
 800329c:	08005830 	.word	0x08005830

080032a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80032a6:	f7ff ffcd 	bl	8003244 <HAL_RCC_GetHCLKFreq>
 80032aa:	4601      	mov	r1, r0
 80032ac:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80032b4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80032b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	fa92 f2a2 	rbit	r2, r2
 80032c0:	603a      	str	r2, [r7, #0]
  return result;
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	fab2 f282 	clz	r2, r2
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	40d3      	lsrs	r3, r2
 80032cc:	4a04      	ldr	r2, [pc, #16]	; (80032e0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80032ce:	5cd3      	ldrb	r3, [r2, r3]
 80032d0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80032d4:	4618      	mov	r0, r3
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40021000 	.word	0x40021000
 80032e0:	08005830 	.word	0x08005830

080032e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b092      	sub	sp, #72	; 0x48
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80032f4:	2300      	movs	r3, #0
 80032f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 80d4 	beq.w	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003308:	4b4e      	ldr	r3, [pc, #312]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10e      	bne.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003314:	4b4b      	ldr	r3, [pc, #300]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	4a4a      	ldr	r2, [pc, #296]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331e:	61d3      	str	r3, [r2, #28]
 8003320:	4b48      	ldr	r3, [pc, #288]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332c:	2301      	movs	r3, #1
 800332e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003332:	4b45      	ldr	r3, [pc, #276]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333a:	2b00      	cmp	r3, #0
 800333c:	d118      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333e:	4b42      	ldr	r3, [pc, #264]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a41      	ldr	r2, [pc, #260]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003348:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334a:	f7fd fe2b 	bl	8000fa4 <HAL_GetTick>
 800334e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	e008      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003352:	f7fd fe27 	bl	8000fa4 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b64      	cmp	r3, #100	; 0x64
 800335e:	d901      	bls.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e13c      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003364:	4b38      	ldr	r3, [pc, #224]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003370:	4b34      	ldr	r3, [pc, #208]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003378:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800337a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8084 	beq.w	800348a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800338c:	429a      	cmp	r2, r3
 800338e:	d07c      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003390:	4b2c      	ldr	r3, [pc, #176]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800339a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800339e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	461a      	mov	r2, r3
 80033b2:	4b26      	ldr	r3, [pc, #152]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	461a      	mov	r2, r3
 80033ba:	2301      	movs	r3, #1
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80033cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033ce:	fab3 f383 	clz	r3, r3
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	4b1d      	ldr	r3, [pc, #116]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	461a      	mov	r2, r3
 80033de:	2300      	movs	r3, #0
 80033e0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033e2:	4a18      	ldr	r2, [pc, #96]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033e6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d04b      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f2:	f7fd fdd7 	bl	8000fa4 <HAL_GetTick>
 80033f6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f8:	e00a      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fa:	f7fd fdd3 	bl	8000fa4 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	f241 3288 	movw	r2, #5000	; 0x1388
 8003408:	4293      	cmp	r3, r2
 800340a:	d901      	bls.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e0e6      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8003410:	2302      	movs	r3, #2
 8003412:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
 800341c:	2302      	movs	r3, #2
 800341e:	623b      	str	r3, [r7, #32]
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	fa93 f3a3 	rbit	r3, r3
 8003426:	61fb      	str	r3, [r7, #28]
  return result;
 8003428:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342a:	fab3 f383 	clz	r3, r3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f043 0302 	orr.w	r3, r3, #2
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d108      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800343e:	4b01      	ldr	r3, [pc, #4]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	e00d      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003444:	40021000 	.word	0x40021000
 8003448:	40007000 	.word	0x40007000
 800344c:	10908100 	.word	0x10908100
 8003450:	2302      	movs	r3, #2
 8003452:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	fa93 f3a3 	rbit	r3, r3
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	4b62      	ldr	r3, [pc, #392]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	2202      	movs	r2, #2
 8003462:	613a      	str	r2, [r7, #16]
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	fa92 f2a2 	rbit	r2, r2
 800346a:	60fa      	str	r2, [r7, #12]
  return result;
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	fab2 f282 	clz	r2, r2
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	f002 021f 	and.w	r2, r2, #31
 800347e:	2101      	movs	r1, #1
 8003480:	fa01 f202 	lsl.w	r2, r1, r2
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0b7      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800348a:	4b57      	ldr	r3, [pc, #348]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4954      	ldr	r1, [pc, #336]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003498:	4313      	orrs	r3, r2
 800349a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800349c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d105      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a4:	4b50      	ldr	r3, [pc, #320]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	4a4f      	ldr	r2, [pc, #316]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d008      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034bc:	4b4a      	ldr	r3, [pc, #296]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c0:	f023 0203 	bic.w	r2, r3, #3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4947      	ldr	r1, [pc, #284]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0320 	and.w	r3, r3, #32
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d008      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034da:	4b43      	ldr	r3, [pc, #268]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	f023 0210 	bic.w	r2, r3, #16
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	4940      	ldr	r1, [pc, #256]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034f8:	4b3b      	ldr	r3, [pc, #236]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	f023 0220 	bic.w	r2, r3, #32
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	4938      	ldr	r1, [pc, #224]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003506:	4313      	orrs	r3, r2
 8003508:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d008      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003516:	4b34      	ldr	r3, [pc, #208]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	4931      	ldr	r1, [pc, #196]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003524:	4313      	orrs	r3, r2
 8003526:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003534:	4b2c      	ldr	r3, [pc, #176]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	4929      	ldr	r1, [pc, #164]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003542:	4313      	orrs	r3, r2
 8003544:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354e:	2b00      	cmp	r3, #0
 8003550:	d008      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003552:	4b25      	ldr	r3, [pc, #148]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	4922      	ldr	r1, [pc, #136]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003560:	4313      	orrs	r3, r2
 8003562:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003570:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003574:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	491a      	ldr	r1, [pc, #104]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800357e:	4313      	orrs	r3, r2
 8003580:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d008      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800358e:	4b16      	ldr	r3, [pc, #88]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	4913      	ldr	r1, [pc, #76]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800359c:	4313      	orrs	r3, r2
 800359e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d008      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80035ac:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	490b      	ldr	r1, [pc, #44]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d008      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80035ca:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	4904      	ldr	r1, [pc, #16]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3748      	adds	r7, #72	; 0x48
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40021000 	.word	0x40021000

080035ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e049      	b.n	8003692 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d106      	bne.n	8003618 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fd fb3c 	bl	8000c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3304      	adds	r3, #4
 8003628:	4619      	mov	r1, r3
 800362a:	4610      	mov	r0, r2
 800362c:	f000 fd00 	bl	8004030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
	...

0800369c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d001      	beq.n	80036b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e03b      	b.n	800372c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a19      	ldr	r2, [pc, #100]	; (8003738 <HAL_TIM_Base_Start_IT+0x9c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d009      	beq.n	80036ea <HAL_TIM_Base_Start_IT+0x4e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036de:	d004      	beq.n	80036ea <HAL_TIM_Base_Start_IT+0x4e>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a15      	ldr	r2, [pc, #84]	; (800373c <HAL_TIM_Base_Start_IT+0xa0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d115      	bne.n	8003716 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	4b13      	ldr	r3, [pc, #76]	; (8003740 <HAL_TIM_Base_Start_IT+0xa4>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b06      	cmp	r3, #6
 80036fa:	d015      	beq.n	8003728 <HAL_TIM_Base_Start_IT+0x8c>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003702:	d011      	beq.n	8003728 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003714:	e008      	b.n	8003728 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0201 	orr.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	e000      	b.n	800372a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003728:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	40012c00 	.word	0x40012c00
 800373c:	40014000 	.word	0x40014000
 8003740:	00010007 	.word	0x00010007

08003744 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e049      	b.n	80037ea <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f841 	bl	80037f2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3304      	adds	r3, #4
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f000 fc54 	bl	8004030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
	...

08003808 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d104      	bne.n	8003826 <HAL_TIM_IC_Start_IT+0x1e>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003822:	b2db      	uxtb	r3, r3
 8003824:	e023      	b.n	800386e <HAL_TIM_IC_Start_IT+0x66>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b04      	cmp	r3, #4
 800382a:	d104      	bne.n	8003836 <HAL_TIM_IC_Start_IT+0x2e>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003832:	b2db      	uxtb	r3, r3
 8003834:	e01b      	b.n	800386e <HAL_TIM_IC_Start_IT+0x66>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b08      	cmp	r3, #8
 800383a:	d104      	bne.n	8003846 <HAL_TIM_IC_Start_IT+0x3e>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003842:	b2db      	uxtb	r3, r3
 8003844:	e013      	b.n	800386e <HAL_TIM_IC_Start_IT+0x66>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b0c      	cmp	r3, #12
 800384a:	d104      	bne.n	8003856 <HAL_TIM_IC_Start_IT+0x4e>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003852:	b2db      	uxtb	r3, r3
 8003854:	e00b      	b.n	800386e <HAL_TIM_IC_Start_IT+0x66>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b10      	cmp	r3, #16
 800385a:	d104      	bne.n	8003866 <HAL_TIM_IC_Start_IT+0x5e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003862:	b2db      	uxtb	r3, r3
 8003864:	e003      	b.n	800386e <HAL_TIM_IC_Start_IT+0x66>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800386c:	b2db      	uxtb	r3, r3
 800386e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d104      	bne.n	8003880 <HAL_TIM_IC_Start_IT+0x78>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800387c:	b2db      	uxtb	r3, r3
 800387e:	e013      	b.n	80038a8 <HAL_TIM_IC_Start_IT+0xa0>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2b04      	cmp	r3, #4
 8003884:	d104      	bne.n	8003890 <HAL_TIM_IC_Start_IT+0x88>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800388c:	b2db      	uxtb	r3, r3
 800388e:	e00b      	b.n	80038a8 <HAL_TIM_IC_Start_IT+0xa0>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b08      	cmp	r3, #8
 8003894:	d104      	bne.n	80038a0 <HAL_TIM_IC_Start_IT+0x98>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800389c:	b2db      	uxtb	r3, r3
 800389e:	e003      	b.n	80038a8 <HAL_TIM_IC_Start_IT+0xa0>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80038aa:	7bbb      	ldrb	r3, [r7, #14]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d102      	bne.n	80038b6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80038b0:	7b7b      	ldrb	r3, [r7, #13]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d001      	beq.n	80038ba <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e0c9      	b.n	8003a4e <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d104      	bne.n	80038ca <HAL_TIM_IC_Start_IT+0xc2>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038c8:	e023      	b.n	8003912 <HAL_TIM_IC_Start_IT+0x10a>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d104      	bne.n	80038da <HAL_TIM_IC_Start_IT+0xd2>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038d8:	e01b      	b.n	8003912 <HAL_TIM_IC_Start_IT+0x10a>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d104      	bne.n	80038ea <HAL_TIM_IC_Start_IT+0xe2>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038e8:	e013      	b.n	8003912 <HAL_TIM_IC_Start_IT+0x10a>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b0c      	cmp	r3, #12
 80038ee:	d104      	bne.n	80038fa <HAL_TIM_IC_Start_IT+0xf2>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038f8:	e00b      	b.n	8003912 <HAL_TIM_IC_Start_IT+0x10a>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b10      	cmp	r3, #16
 80038fe:	d104      	bne.n	800390a <HAL_TIM_IC_Start_IT+0x102>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003908:	e003      	b.n	8003912 <HAL_TIM_IC_Start_IT+0x10a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2202      	movs	r2, #2
 800390e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d104      	bne.n	8003922 <HAL_TIM_IC_Start_IT+0x11a>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003920:	e013      	b.n	800394a <HAL_TIM_IC_Start_IT+0x142>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b04      	cmp	r3, #4
 8003926:	d104      	bne.n	8003932 <HAL_TIM_IC_Start_IT+0x12a>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003930:	e00b      	b.n	800394a <HAL_TIM_IC_Start_IT+0x142>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b08      	cmp	r3, #8
 8003936:	d104      	bne.n	8003942 <HAL_TIM_IC_Start_IT+0x13a>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003940:	e003      	b.n	800394a <HAL_TIM_IC_Start_IT+0x142>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2202      	movs	r2, #2
 8003946:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b0c      	cmp	r3, #12
 800394e:	d841      	bhi.n	80039d4 <HAL_TIM_IC_Start_IT+0x1cc>
 8003950:	a201      	add	r2, pc, #4	; (adr r2, 8003958 <HAL_TIM_IC_Start_IT+0x150>)
 8003952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003956:	bf00      	nop
 8003958:	0800398d 	.word	0x0800398d
 800395c:	080039d5 	.word	0x080039d5
 8003960:	080039d5 	.word	0x080039d5
 8003964:	080039d5 	.word	0x080039d5
 8003968:	0800399f 	.word	0x0800399f
 800396c:	080039d5 	.word	0x080039d5
 8003970:	080039d5 	.word	0x080039d5
 8003974:	080039d5 	.word	0x080039d5
 8003978:	080039b1 	.word	0x080039b1
 800397c:	080039d5 	.word	0x080039d5
 8003980:	080039d5 	.word	0x080039d5
 8003984:	080039d5 	.word	0x080039d5
 8003988:	080039c3 	.word	0x080039c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0202 	orr.w	r2, r2, #2
 800399a:	60da      	str	r2, [r3, #12]
      break;
 800399c:	e01d      	b.n	80039da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f042 0204 	orr.w	r2, r2, #4
 80039ac:	60da      	str	r2, [r3, #12]
      break;
 80039ae:	e014      	b.n	80039da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0208 	orr.w	r2, r2, #8
 80039be:	60da      	str	r2, [r3, #12]
      break;
 80039c0:	e00b      	b.n	80039da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0210 	orr.w	r2, r2, #16
 80039d0:	60da      	str	r2, [r3, #12]
      break;
 80039d2:	e002      	b.n	80039da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
      break;
 80039d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80039da:	7bfb      	ldrb	r3, [r7, #15]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d135      	bne.n	8003a4c <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2201      	movs	r2, #1
 80039e6:	6839      	ldr	r1, [r7, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fd35 	bl	8004458 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a19      	ldr	r2, [pc, #100]	; (8003a58 <HAL_TIM_IC_Start_IT+0x250>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d009      	beq.n	8003a0c <HAL_TIM_IC_Start_IT+0x204>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a00:	d004      	beq.n	8003a0c <HAL_TIM_IC_Start_IT+0x204>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a15      	ldr	r2, [pc, #84]	; (8003a5c <HAL_TIM_IC_Start_IT+0x254>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d115      	bne.n	8003a38 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	4b13      	ldr	r3, [pc, #76]	; (8003a60 <HAL_TIM_IC_Start_IT+0x258>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b06      	cmp	r3, #6
 8003a1c:	d015      	beq.n	8003a4a <HAL_TIM_IC_Start_IT+0x242>
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a24:	d011      	beq.n	8003a4a <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 0201 	orr.w	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a36:	e008      	b.n	8003a4a <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	e000      	b.n	8003a4c <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a4a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40012c00 	.word	0x40012c00
 8003a5c:	40014000 	.word	0x40014000
 8003a60:	00010007 	.word	0x00010007

08003a64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d122      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d11b      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0202 	mvn.w	r2, #2
 8003a90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7fc ffa6 	bl	80009f8 <HAL_TIM_IC_CaptureCallback>
 8003aac:	e005      	b.n	8003aba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 faa0 	bl	8003ff4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 faa7 	bl	8004008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d122      	bne.n	8003b14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d11b      	bne.n	8003b14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0204 	mvn.w	r2, #4
 8003ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fc ff7c 	bl	80009f8 <HAL_TIM_IC_CaptureCallback>
 8003b00:	e005      	b.n	8003b0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fa76 	bl	8003ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 fa7d 	bl	8004008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d122      	bne.n	8003b68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d11b      	bne.n	8003b68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0208 	mvn.w	r2, #8
 8003b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7fc ff52 	bl	80009f8 <HAL_TIM_IC_CaptureCallback>
 8003b54:	e005      	b.n	8003b62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fa4c 	bl	8003ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fa53 	bl	8004008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	2b10      	cmp	r3, #16
 8003b74:	d122      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	2b10      	cmp	r3, #16
 8003b82:	d11b      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0210 	mvn.w	r2, #16
 8003b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2208      	movs	r2, #8
 8003b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fc ff28 	bl	80009f8 <HAL_TIM_IC_CaptureCallback>
 8003ba8:	e005      	b.n	8003bb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fa22 	bl	8003ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fa29 	bl	8004008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d10e      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d107      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0201 	mvn.w	r2, #1
 8003be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7fc ffd2 	bl	8000b8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf2:	2b80      	cmp	r3, #128	; 0x80
 8003bf4:	d10e      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c00:	2b80      	cmp	r3, #128	; 0x80
 8003c02:	d107      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fcb8 	bl	8004584 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c22:	d10e      	bne.n	8003c42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2e:	2b80      	cmp	r3, #128	; 0x80
 8003c30:	d107      	bne.n	8003c42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 fcab 	bl	8004598 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b40      	cmp	r3, #64	; 0x40
 8003c4e:	d10e      	bne.n	8003c6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b40      	cmp	r3, #64	; 0x40
 8003c5c:	d107      	bne.n	8003c6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f9d7 	bl	800401c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d10e      	bne.n	8003c9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	d107      	bne.n	8003c9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f06f 0220 	mvn.w	r2, #32
 8003c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fc6b 	bl	8004570 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b086      	sub	sp, #24
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e088      	b.n	8003dd2 <HAL_TIM_IC_ConfigChannel+0x130>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d11b      	bne.n	8003d06 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	6819      	ldr	r1, [r3, #0]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f000 fa15 	bl	800410c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699a      	ldr	r2, [r3, #24]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 020c 	bic.w	r2, r2, #12
 8003cf0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6999      	ldr	r1, [r3, #24]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	619a      	str	r2, [r3, #24]
 8003d04:	e060      	b.n	8003dc8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d11c      	bne.n	8003d46 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6818      	ldr	r0, [r3, #0]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	6819      	ldr	r1, [r3, #0]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f000 fa7b 	bl	8004216 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d2e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6999      	ldr	r1, [r3, #24]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	021a      	lsls	r2, r3, #8
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	619a      	str	r2, [r3, #24]
 8003d44:	e040      	b.n	8003dc8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d11b      	bne.n	8003d84 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	6819      	ldr	r1, [r3, #0]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f000 fac8 	bl	80042f0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	69da      	ldr	r2, [r3, #28]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 020c 	bic.w	r2, r2, #12
 8003d6e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	69d9      	ldr	r1, [r3, #28]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	61da      	str	r2, [r3, #28]
 8003d82:	e021      	b.n	8003dc8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b0c      	cmp	r3, #12
 8003d88:	d11c      	bne.n	8003dc4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	6819      	ldr	r1, [r3, #0]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f000 fae5 	bl	8004368 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69da      	ldr	r2, [r3, #28]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003dac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69d9      	ldr	r1, [r3, #28]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	021a      	lsls	r2, r3, #8
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	61da      	str	r2, [r3, #28]
 8003dc2:	e001      	b.n	8003dc8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b084      	sub	sp, #16
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <HAL_TIM_ConfigClockSource+0x1c>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e0b6      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x18a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2202      	movs	r2, #2
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e14:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e18:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e20:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e32:	d03e      	beq.n	8003eb2 <HAL_TIM_ConfigClockSource+0xd8>
 8003e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e38:	f200 8087 	bhi.w	8003f4a <HAL_TIM_ConfigClockSource+0x170>
 8003e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e40:	f000 8086 	beq.w	8003f50 <HAL_TIM_ConfigClockSource+0x176>
 8003e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e48:	d87f      	bhi.n	8003f4a <HAL_TIM_ConfigClockSource+0x170>
 8003e4a:	2b70      	cmp	r3, #112	; 0x70
 8003e4c:	d01a      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0xaa>
 8003e4e:	2b70      	cmp	r3, #112	; 0x70
 8003e50:	d87b      	bhi.n	8003f4a <HAL_TIM_ConfigClockSource+0x170>
 8003e52:	2b60      	cmp	r3, #96	; 0x60
 8003e54:	d050      	beq.n	8003ef8 <HAL_TIM_ConfigClockSource+0x11e>
 8003e56:	2b60      	cmp	r3, #96	; 0x60
 8003e58:	d877      	bhi.n	8003f4a <HAL_TIM_ConfigClockSource+0x170>
 8003e5a:	2b50      	cmp	r3, #80	; 0x50
 8003e5c:	d03c      	beq.n	8003ed8 <HAL_TIM_ConfigClockSource+0xfe>
 8003e5e:	2b50      	cmp	r3, #80	; 0x50
 8003e60:	d873      	bhi.n	8003f4a <HAL_TIM_ConfigClockSource+0x170>
 8003e62:	2b40      	cmp	r3, #64	; 0x40
 8003e64:	d058      	beq.n	8003f18 <HAL_TIM_ConfigClockSource+0x13e>
 8003e66:	2b40      	cmp	r3, #64	; 0x40
 8003e68:	d86f      	bhi.n	8003f4a <HAL_TIM_ConfigClockSource+0x170>
 8003e6a:	2b30      	cmp	r3, #48	; 0x30
 8003e6c:	d064      	beq.n	8003f38 <HAL_TIM_ConfigClockSource+0x15e>
 8003e6e:	2b30      	cmp	r3, #48	; 0x30
 8003e70:	d86b      	bhi.n	8003f4a <HAL_TIM_ConfigClockSource+0x170>
 8003e72:	2b20      	cmp	r3, #32
 8003e74:	d060      	beq.n	8003f38 <HAL_TIM_ConfigClockSource+0x15e>
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	d867      	bhi.n	8003f4a <HAL_TIM_ConfigClockSource+0x170>
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d05c      	beq.n	8003f38 <HAL_TIM_ConfigClockSource+0x15e>
 8003e7e:	2b10      	cmp	r3, #16
 8003e80:	d05a      	beq.n	8003f38 <HAL_TIM_ConfigClockSource+0x15e>
 8003e82:	e062      	b.n	8003f4a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6818      	ldr	r0, [r3, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	6899      	ldr	r1, [r3, #8]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f000 fac0 	bl	8004418 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ea6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	609a      	str	r2, [r3, #8]
      break;
 8003eb0:	e04f      	b.n	8003f52 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6899      	ldr	r1, [r3, #8]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	f000 faa9 	bl	8004418 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ed4:	609a      	str	r2, [r3, #8]
      break;
 8003ed6:	e03c      	b.n	8003f52 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6818      	ldr	r0, [r3, #0]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	6859      	ldr	r1, [r3, #4]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	f000 f967 	bl	80041b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2150      	movs	r1, #80	; 0x50
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fa76 	bl	80043e2 <TIM_ITRx_SetConfig>
      break;
 8003ef6:	e02c      	b.n	8003f52 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	6859      	ldr	r1, [r3, #4]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	461a      	mov	r2, r3
 8003f06:	f000 f9c3 	bl	8004290 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2160      	movs	r1, #96	; 0x60
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fa66 	bl	80043e2 <TIM_ITRx_SetConfig>
      break;
 8003f16:	e01c      	b.n	8003f52 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6818      	ldr	r0, [r3, #0]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	6859      	ldr	r1, [r3, #4]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	461a      	mov	r2, r3
 8003f26:	f000 f947 	bl	80041b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2140      	movs	r1, #64	; 0x40
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 fa56 	bl	80043e2 <TIM_ITRx_SetConfig>
      break;
 8003f36:	e00c      	b.n	8003f52 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4619      	mov	r1, r3
 8003f42:	4610      	mov	r0, r2
 8003f44:	f000 fa4d 	bl	80043e2 <TIM_ITRx_SetConfig>
      break;
 8003f48:	e003      	b.n	8003f52 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8003f4e:	e000      	b.n	8003f52 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003f50:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b0c      	cmp	r3, #12
 8003f7e:	d831      	bhi.n	8003fe4 <HAL_TIM_ReadCapturedValue+0x78>
 8003f80:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f86:	bf00      	nop
 8003f88:	08003fbd 	.word	0x08003fbd
 8003f8c:	08003fe5 	.word	0x08003fe5
 8003f90:	08003fe5 	.word	0x08003fe5
 8003f94:	08003fe5 	.word	0x08003fe5
 8003f98:	08003fc7 	.word	0x08003fc7
 8003f9c:	08003fe5 	.word	0x08003fe5
 8003fa0:	08003fe5 	.word	0x08003fe5
 8003fa4:	08003fe5 	.word	0x08003fe5
 8003fa8:	08003fd1 	.word	0x08003fd1
 8003fac:	08003fe5 	.word	0x08003fe5
 8003fb0:	08003fe5 	.word	0x08003fe5
 8003fb4:	08003fe5 	.word	0x08003fe5
 8003fb8:	08003fdb 	.word	0x08003fdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc2:	60fb      	str	r3, [r7, #12]

      break;
 8003fc4:	e00f      	b.n	8003fe6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	60fb      	str	r3, [r7, #12]

      break;
 8003fce:	e00a      	b.n	8003fe6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd6:	60fb      	str	r3, [r7, #12]

      break;
 8003fd8:	e005      	b.n	8003fe6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	60fb      	str	r3, [r7, #12]

      break;
 8003fe2:	e000      	b.n	8003fe6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003fe4:	bf00      	nop
  }

  return tmpreg;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a2e      	ldr	r2, [pc, #184]	; (80040fc <TIM_Base_SetConfig+0xcc>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d003      	beq.n	8004050 <TIM_Base_SetConfig+0x20>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800404e:	d108      	bne.n	8004062 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a25      	ldr	r2, [pc, #148]	; (80040fc <TIM_Base_SetConfig+0xcc>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00f      	beq.n	800408a <TIM_Base_SetConfig+0x5a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004070:	d00b      	beq.n	800408a <TIM_Base_SetConfig+0x5a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a22      	ldr	r2, [pc, #136]	; (8004100 <TIM_Base_SetConfig+0xd0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d007      	beq.n	800408a <TIM_Base_SetConfig+0x5a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a21      	ldr	r2, [pc, #132]	; (8004104 <TIM_Base_SetConfig+0xd4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d003      	beq.n	800408a <TIM_Base_SetConfig+0x5a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a20      	ldr	r2, [pc, #128]	; (8004108 <TIM_Base_SetConfig+0xd8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d108      	bne.n	800409c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a0e      	ldr	r2, [pc, #56]	; (80040fc <TIM_Base_SetConfig+0xcc>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00b      	beq.n	80040e0 <TIM_Base_SetConfig+0xb0>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a0d      	ldr	r2, [pc, #52]	; (8004100 <TIM_Base_SetConfig+0xd0>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d007      	beq.n	80040e0 <TIM_Base_SetConfig+0xb0>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a0c      	ldr	r2, [pc, #48]	; (8004104 <TIM_Base_SetConfig+0xd4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d003      	beq.n	80040e0 <TIM_Base_SetConfig+0xb0>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a0b      	ldr	r2, [pc, #44]	; (8004108 <TIM_Base_SetConfig+0xd8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d103      	bne.n	80040e8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	615a      	str	r2, [r3, #20]
}
 80040ee:	bf00      	nop
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40012c00 	.word	0x40012c00
 8004100:	40014000 	.word	0x40014000
 8004104:	40014400 	.word	0x40014400
 8004108:	40014800 	.word	0x40014800

0800410c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	f023 0201 	bic.w	r2, r3, #1
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4a1e      	ldr	r2, [pc, #120]	; (80041b0 <TIM_TI1_SetConfig+0xa4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d007      	beq.n	800414a <TIM_TI1_SetConfig+0x3e>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004140:	d003      	beq.n	800414a <TIM_TI1_SetConfig+0x3e>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4a1b      	ldr	r2, [pc, #108]	; (80041b4 <TIM_TI1_SetConfig+0xa8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d101      	bne.n	800414e <TIM_TI1_SetConfig+0x42>
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <TIM_TI1_SetConfig+0x44>
 800414e:	2300      	movs	r3, #0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f023 0303 	bic.w	r3, r3, #3
 800415a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	e003      	b.n	800416e <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004174:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	b2db      	uxtb	r3, r3
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f023 030a 	bic.w	r3, r3, #10
 8004188:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f003 030a 	and.w	r3, r3, #10
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	621a      	str	r2, [r3, #32]
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40012c00 	.word	0x40012c00
 80041b4:	40014000 	.word	0x40014000

080041b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f023 0201 	bic.w	r2, r3, #1
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f023 030a 	bic.w	r3, r3, #10
 80041f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	621a      	str	r2, [r3, #32]
}
 800420a:	bf00      	nop
 800420c:	371c      	adds	r7, #28
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004216:	b480      	push	{r7}
 8004218:	b087      	sub	sp, #28
 800421a:	af00      	add	r7, sp, #0
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	607a      	str	r2, [r7, #4]
 8004222:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	f023 0210 	bic.w	r2, r3, #16
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004242:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004254:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	031b      	lsls	r3, r3, #12
 800425a:	b29b      	uxth	r3, r3
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	4313      	orrs	r3, r2
 8004260:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004268:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	621a      	str	r2, [r3, #32]
}
 8004284:	bf00      	nop
 8004286:	371c      	adds	r7, #28
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	f023 0210 	bic.w	r2, r3, #16
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	031b      	lsls	r3, r3, #12
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	621a      	str	r2, [r3, #32]
}
 80042e4:	bf00      	nop
 80042e6:	371c      	adds	r7, #28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f023 0303 	bic.w	r3, r3, #3
 800431c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4313      	orrs	r3, r2
 8004324:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800432c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	b2db      	uxtb	r3, r3
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004340:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	621a      	str	r2, [r3, #32]
}
 800435c:	bf00      	nop
 800435e:	371c      	adds	r7, #28
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004394:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	4313      	orrs	r3, r2
 800439e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	031b      	lsls	r3, r3, #12
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80043ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	031b      	lsls	r3, r3, #12
 80043c0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	621a      	str	r2, [r3, #32]
}
 80043d6:	bf00      	nop
 80043d8:	371c      	adds	r7, #28
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b085      	sub	sp, #20
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	f043 0307 	orr.w	r3, r3, #7
 8004404:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	609a      	str	r2, [r3, #8]
}
 800440c:	bf00      	nop
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004432:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	021a      	lsls	r2, r3, #8
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	431a      	orrs	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4313      	orrs	r3, r2
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	609a      	str	r2, [r3, #8]
}
 800444c:	bf00      	nop
 800444e:	371c      	adds	r7, #28
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	2201      	movs	r2, #1
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a1a      	ldr	r2, [r3, #32]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	43db      	mvns	r3, r3
 800447a:	401a      	ands	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a1a      	ldr	r2, [r3, #32]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	fa01 f303 	lsl.w	r3, r1, r3
 8004490:	431a      	orrs	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	621a      	str	r2, [r3, #32]
}
 8004496:	bf00      	nop
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
	...

080044a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e04f      	b.n	800455c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a21      	ldr	r2, [pc, #132]	; (8004568 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d108      	bne.n	80044f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80044ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a14      	ldr	r2, [pc, #80]	; (8004568 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d009      	beq.n	8004530 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004524:	d004      	beq.n	8004530 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a10      	ldr	r2, [pc, #64]	; (800456c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d10c      	bne.n	800454a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004536:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	4313      	orrs	r3, r2
 8004540:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	40012c00 	.word	0x40012c00
 800456c:	40014000 	.word	0x40014000

08004570 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e040      	b.n	8004640 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d106      	bne.n	80045d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7fc fba6 	bl	8000d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2224      	movs	r2, #36	; 0x24
 80045d8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0201 	bic.w	r2, r2, #1
 80045e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f8b6 	bl	800475c <UART_SetConfig>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d101      	bne.n	80045fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e022      	b.n	8004640 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f9e0 	bl	80049c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004616:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004626:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 fa67 	bl	8004b0c <UART_CheckIdleState>
 800463e:	4603      	mov	r3, r0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b08a      	sub	sp, #40	; 0x28
 800464c:	af02      	add	r7, sp, #8
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	4613      	mov	r3, r2
 8004656:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800465c:	2b20      	cmp	r3, #32
 800465e:	d178      	bne.n	8004752 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <HAL_UART_Transmit+0x24>
 8004666:	88fb      	ldrh	r3, [r7, #6]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e071      	b.n	8004754 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2221      	movs	r2, #33	; 0x21
 800467c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800467e:	f7fc fc91 	bl	8000fa4 <HAL_GetTick>
 8004682:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	88fa      	ldrh	r2, [r7, #6]
 8004688:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	88fa      	ldrh	r2, [r7, #6]
 8004690:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469c:	d108      	bne.n	80046b0 <HAL_UART_Transmit+0x68>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d104      	bne.n	80046b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	61bb      	str	r3, [r7, #24]
 80046ae:	e003      	b.n	80046b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046b4:	2300      	movs	r3, #0
 80046b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046b8:	e030      	b.n	800471c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2200      	movs	r2, #0
 80046c2:	2180      	movs	r1, #128	; 0x80
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 fac9 	bl	8004c5c <UART_WaitOnFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d004      	beq.n	80046da <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e03c      	b.n	8004754 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10b      	bne.n	80046f8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	881a      	ldrh	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046ec:	b292      	uxth	r2, r2
 80046ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	3302      	adds	r3, #2
 80046f4:	61bb      	str	r3, [r7, #24]
 80046f6:	e008      	b.n	800470a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	781a      	ldrb	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	b292      	uxth	r2, r2
 8004702:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	3301      	adds	r3, #1
 8004708:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004722:	b29b      	uxth	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1c8      	bne.n	80046ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2200      	movs	r2, #0
 8004730:	2140      	movs	r1, #64	; 0x40
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 fa92 	bl	8004c5c <UART_WaitOnFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d004      	beq.n	8004748 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2220      	movs	r2, #32
 8004742:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e005      	b.n	8004754 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2220      	movs	r2, #32
 800474c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	e000      	b.n	8004754 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004752:	2302      	movs	r3, #2
  }
}
 8004754:	4618      	mov	r0, r3
 8004756:	3720      	adds	r7, #32
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004764:	2300      	movs	r3, #0
 8004766:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	4b8a      	ldr	r3, [pc, #552]	; (80049b0 <UART_SetConfig+0x254>)
 8004788:	4013      	ands	r3, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6812      	ldr	r2, [r2, #0]
 800478e:	6979      	ldr	r1, [r7, #20]
 8004790:	430b      	orrs	r3, r1
 8004792:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a78      	ldr	r2, [pc, #480]	; (80049b4 <UART_SetConfig+0x258>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d120      	bne.n	800481a <UART_SetConfig+0xbe>
 80047d8:	4b77      	ldr	r3, [pc, #476]	; (80049b8 <UART_SetConfig+0x25c>)
 80047da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047dc:	f003 0303 	and.w	r3, r3, #3
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d817      	bhi.n	8004814 <UART_SetConfig+0xb8>
 80047e4:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <UART_SetConfig+0x90>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	080047fd 	.word	0x080047fd
 80047f0:	08004809 	.word	0x08004809
 80047f4:	0800480f 	.word	0x0800480f
 80047f8:	08004803 	.word	0x08004803
 80047fc:	2300      	movs	r3, #0
 80047fe:	77fb      	strb	r3, [r7, #31]
 8004800:	e01d      	b.n	800483e <UART_SetConfig+0xe2>
 8004802:	2302      	movs	r3, #2
 8004804:	77fb      	strb	r3, [r7, #31]
 8004806:	e01a      	b.n	800483e <UART_SetConfig+0xe2>
 8004808:	2304      	movs	r3, #4
 800480a:	77fb      	strb	r3, [r7, #31]
 800480c:	e017      	b.n	800483e <UART_SetConfig+0xe2>
 800480e:	2308      	movs	r3, #8
 8004810:	77fb      	strb	r3, [r7, #31]
 8004812:	e014      	b.n	800483e <UART_SetConfig+0xe2>
 8004814:	2310      	movs	r3, #16
 8004816:	77fb      	strb	r3, [r7, #31]
 8004818:	e011      	b.n	800483e <UART_SetConfig+0xe2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a67      	ldr	r2, [pc, #412]	; (80049bc <UART_SetConfig+0x260>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d102      	bne.n	800482a <UART_SetConfig+0xce>
 8004824:	2300      	movs	r3, #0
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e009      	b.n	800483e <UART_SetConfig+0xe2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a64      	ldr	r2, [pc, #400]	; (80049c0 <UART_SetConfig+0x264>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d102      	bne.n	800483a <UART_SetConfig+0xde>
 8004834:	2300      	movs	r3, #0
 8004836:	77fb      	strb	r3, [r7, #31]
 8004838:	e001      	b.n	800483e <UART_SetConfig+0xe2>
 800483a:	2310      	movs	r3, #16
 800483c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004846:	d15a      	bne.n	80048fe <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004848:	7ffb      	ldrb	r3, [r7, #31]
 800484a:	2b08      	cmp	r3, #8
 800484c:	d827      	bhi.n	800489e <UART_SetConfig+0x142>
 800484e:	a201      	add	r2, pc, #4	; (adr r2, 8004854 <UART_SetConfig+0xf8>)
 8004850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004854:	08004879 	.word	0x08004879
 8004858:	08004881 	.word	0x08004881
 800485c:	08004889 	.word	0x08004889
 8004860:	0800489f 	.word	0x0800489f
 8004864:	0800488f 	.word	0x0800488f
 8004868:	0800489f 	.word	0x0800489f
 800486c:	0800489f 	.word	0x0800489f
 8004870:	0800489f 	.word	0x0800489f
 8004874:	08004897 	.word	0x08004897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004878:	f7fe fcf0 	bl	800325c <HAL_RCC_GetPCLK1Freq>
 800487c:	61b8      	str	r0, [r7, #24]
        break;
 800487e:	e013      	b.n	80048a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004880:	f7fe fd0e 	bl	80032a0 <HAL_RCC_GetPCLK2Freq>
 8004884:	61b8      	str	r0, [r7, #24]
        break;
 8004886:	e00f      	b.n	80048a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004888:	4b4e      	ldr	r3, [pc, #312]	; (80049c4 <UART_SetConfig+0x268>)
 800488a:	61bb      	str	r3, [r7, #24]
        break;
 800488c:	e00c      	b.n	80048a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800488e:	f7fe fc6f 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 8004892:	61b8      	str	r0, [r7, #24]
        break;
 8004894:	e008      	b.n	80048a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800489a:	61bb      	str	r3, [r7, #24]
        break;
 800489c:	e004      	b.n	80048a8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	77bb      	strb	r3, [r7, #30]
        break;
 80048a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d074      	beq.n	8004998 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	005a      	lsls	r2, r3, #1
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	085b      	lsrs	r3, r3, #1
 80048b8:	441a      	add	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	2b0f      	cmp	r3, #15
 80048c8:	d916      	bls.n	80048f8 <UART_SetConfig+0x19c>
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d0:	d212      	bcs.n	80048f8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f023 030f 	bic.w	r3, r3, #15
 80048da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	085b      	lsrs	r3, r3, #1
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	89fb      	ldrh	r3, [r7, #14]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	89fa      	ldrh	r2, [r7, #14]
 80048f4:	60da      	str	r2, [r3, #12]
 80048f6:	e04f      	b.n	8004998 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	77bb      	strb	r3, [r7, #30]
 80048fc:	e04c      	b.n	8004998 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048fe:	7ffb      	ldrb	r3, [r7, #31]
 8004900:	2b08      	cmp	r3, #8
 8004902:	d828      	bhi.n	8004956 <UART_SetConfig+0x1fa>
 8004904:	a201      	add	r2, pc, #4	; (adr r2, 800490c <UART_SetConfig+0x1b0>)
 8004906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490a:	bf00      	nop
 800490c:	08004931 	.word	0x08004931
 8004910:	08004939 	.word	0x08004939
 8004914:	08004941 	.word	0x08004941
 8004918:	08004957 	.word	0x08004957
 800491c:	08004947 	.word	0x08004947
 8004920:	08004957 	.word	0x08004957
 8004924:	08004957 	.word	0x08004957
 8004928:	08004957 	.word	0x08004957
 800492c:	0800494f 	.word	0x0800494f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004930:	f7fe fc94 	bl	800325c <HAL_RCC_GetPCLK1Freq>
 8004934:	61b8      	str	r0, [r7, #24]
        break;
 8004936:	e013      	b.n	8004960 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004938:	f7fe fcb2 	bl	80032a0 <HAL_RCC_GetPCLK2Freq>
 800493c:	61b8      	str	r0, [r7, #24]
        break;
 800493e:	e00f      	b.n	8004960 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004940:	4b20      	ldr	r3, [pc, #128]	; (80049c4 <UART_SetConfig+0x268>)
 8004942:	61bb      	str	r3, [r7, #24]
        break;
 8004944:	e00c      	b.n	8004960 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004946:	f7fe fc13 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 800494a:	61b8      	str	r0, [r7, #24]
        break;
 800494c:	e008      	b.n	8004960 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800494e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004952:	61bb      	str	r3, [r7, #24]
        break;
 8004954:	e004      	b.n	8004960 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	77bb      	strb	r3, [r7, #30]
        break;
 800495e:	bf00      	nop
    }

    if (pclk != 0U)
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d018      	beq.n	8004998 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	085a      	lsrs	r2, r3, #1
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	441a      	add	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2b0f      	cmp	r3, #15
 800497e:	d909      	bls.n	8004994 <UART_SetConfig+0x238>
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004986:	d205      	bcs.n	8004994 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	b29a      	uxth	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	60da      	str	r2, [r3, #12]
 8004992:	e001      	b.n	8004998 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80049a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	efff69f3 	.word	0xefff69f3
 80049b4:	40013800 	.word	0x40013800
 80049b8:	40021000 	.word	0x40021000
 80049bc:	40004400 	.word	0x40004400
 80049c0:	40004800 	.word	0x40004800
 80049c4:	007a1200 	.word	0x007a1200

080049c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01a      	beq.n	8004ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ac6:	d10a      	bne.n	8004ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	605a      	str	r2, [r3, #4]
  }
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b098      	sub	sp, #96	; 0x60
 8004b10:	af02      	add	r7, sp, #8
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b1c:	f7fc fa42 	bl	8000fa4 <HAL_GetTick>
 8004b20:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d12e      	bne.n	8004b8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f88c 	bl	8004c5c <UART_WaitOnFlagUntilTimeout>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d021      	beq.n	8004b8e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b52:	e853 3f00 	ldrex	r3, [r3]
 8004b56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b5e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	461a      	mov	r2, r3
 8004b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b68:	647b      	str	r3, [r7, #68]	; 0x44
 8004b6a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b70:	e841 2300 	strex	r3, r2, [r1]
 8004b74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1e6      	bne.n	8004b4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e062      	b.n	8004c54 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d149      	bne.n	8004c30 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f856 	bl	8004c5c <UART_WaitOnFlagUntilTimeout>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d03c      	beq.n	8004c30 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	623b      	str	r3, [r7, #32]
   return(result);
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd4:	633b      	str	r3, [r7, #48]	; 0x30
 8004bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e6      	bne.n	8004bb6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3308      	adds	r3, #8
 8004bee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 0301 	bic.w	r3, r3, #1
 8004bfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3308      	adds	r3, #8
 8004c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c08:	61fa      	str	r2, [r7, #28]
 8004c0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	69b9      	ldr	r1, [r7, #24]
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	617b      	str	r3, [r7, #20]
   return(result);
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e5      	bne.n	8004be8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e011      	b.n	8004c54 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3758      	adds	r7, #88	; 0x58
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c6c:	e049      	b.n	8004d02 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c74:	d045      	beq.n	8004d02 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c76:	f7fc f995 	bl	8000fa4 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d302      	bcc.n	8004c8c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e048      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d031      	beq.n	8004d02 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d110      	bne.n	8004cce <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f838 	bl	8004d2a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2208      	movs	r2, #8
 8004cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e029      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cdc:	d111      	bne.n	8004d02 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ce6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 f81e 	bl	8004d2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e00f      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69da      	ldr	r2, [r3, #28]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	bf0c      	ite	eq
 8004d12:	2301      	moveq	r3, #1
 8004d14:	2300      	movne	r3, #0
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d0a6      	beq.n	8004c6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b095      	sub	sp, #84	; 0x54
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d50:	643b      	str	r3, [r7, #64]	; 0x40
 8004d52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e6      	bne.n	8004d32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3308      	adds	r3, #8
 8004d6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	e853 3f00 	ldrex	r3, [r3]
 8004d72:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	f023 0301 	bic.w	r3, r3, #1
 8004d7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3308      	adds	r3, #8
 8004d82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d8c:	e841 2300 	strex	r3, r2, [r1]
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e5      	bne.n	8004d64 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d118      	bne.n	8004dd2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f023 0310 	bic.w	r3, r3, #16
 8004db4:	647b      	str	r3, [r7, #68]	; 0x44
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dbe:	61bb      	str	r3, [r7, #24]
 8004dc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	6979      	ldr	r1, [r7, #20]
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	613b      	str	r3, [r7, #16]
   return(result);
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e6      	bne.n	8004da0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004de6:	bf00      	nop
 8004de8:	3754      	adds	r7, #84	; 0x54
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
	...

08004df4 <__errno>:
 8004df4:	4b01      	ldr	r3, [pc, #4]	; (8004dfc <__errno+0x8>)
 8004df6:	6818      	ldr	r0, [r3, #0]
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20000020 	.word	0x20000020

08004e00 <__libc_init_array>:
 8004e00:	b570      	push	{r4, r5, r6, lr}
 8004e02:	4d0d      	ldr	r5, [pc, #52]	; (8004e38 <__libc_init_array+0x38>)
 8004e04:	4c0d      	ldr	r4, [pc, #52]	; (8004e3c <__libc_init_array+0x3c>)
 8004e06:	1b64      	subs	r4, r4, r5
 8004e08:	10a4      	asrs	r4, r4, #2
 8004e0a:	2600      	movs	r6, #0
 8004e0c:	42a6      	cmp	r6, r4
 8004e0e:	d109      	bne.n	8004e24 <__libc_init_array+0x24>
 8004e10:	4d0b      	ldr	r5, [pc, #44]	; (8004e40 <__libc_init_array+0x40>)
 8004e12:	4c0c      	ldr	r4, [pc, #48]	; (8004e44 <__libc_init_array+0x44>)
 8004e14:	f000 fc8e 	bl	8005734 <_init>
 8004e18:	1b64      	subs	r4, r4, r5
 8004e1a:	10a4      	asrs	r4, r4, #2
 8004e1c:	2600      	movs	r6, #0
 8004e1e:	42a6      	cmp	r6, r4
 8004e20:	d105      	bne.n	8004e2e <__libc_init_array+0x2e>
 8004e22:	bd70      	pop	{r4, r5, r6, pc}
 8004e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e28:	4798      	blx	r3
 8004e2a:	3601      	adds	r6, #1
 8004e2c:	e7ee      	b.n	8004e0c <__libc_init_array+0xc>
 8004e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e32:	4798      	blx	r3
 8004e34:	3601      	adds	r6, #1
 8004e36:	e7f2      	b.n	8004e1e <__libc_init_array+0x1e>
 8004e38:	0800588c 	.word	0x0800588c
 8004e3c:	0800588c 	.word	0x0800588c
 8004e40:	0800588c 	.word	0x0800588c
 8004e44:	08005890 	.word	0x08005890

08004e48 <memset>:
 8004e48:	4402      	add	r2, r0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d100      	bne.n	8004e52 <memset+0xa>
 8004e50:	4770      	bx	lr
 8004e52:	f803 1b01 	strb.w	r1, [r3], #1
 8004e56:	e7f9      	b.n	8004e4c <memset+0x4>

08004e58 <siprintf>:
 8004e58:	b40e      	push	{r1, r2, r3}
 8004e5a:	b500      	push	{lr}
 8004e5c:	b09c      	sub	sp, #112	; 0x70
 8004e5e:	ab1d      	add	r3, sp, #116	; 0x74
 8004e60:	9002      	str	r0, [sp, #8]
 8004e62:	9006      	str	r0, [sp, #24]
 8004e64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e68:	4809      	ldr	r0, [pc, #36]	; (8004e90 <siprintf+0x38>)
 8004e6a:	9107      	str	r1, [sp, #28]
 8004e6c:	9104      	str	r1, [sp, #16]
 8004e6e:	4909      	ldr	r1, [pc, #36]	; (8004e94 <siprintf+0x3c>)
 8004e70:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e74:	9105      	str	r1, [sp, #20]
 8004e76:	6800      	ldr	r0, [r0, #0]
 8004e78:	9301      	str	r3, [sp, #4]
 8004e7a:	a902      	add	r1, sp, #8
 8004e7c:	f000 f868 	bl	8004f50 <_svfiprintf_r>
 8004e80:	9b02      	ldr	r3, [sp, #8]
 8004e82:	2200      	movs	r2, #0
 8004e84:	701a      	strb	r2, [r3, #0]
 8004e86:	b01c      	add	sp, #112	; 0x70
 8004e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e8c:	b003      	add	sp, #12
 8004e8e:	4770      	bx	lr
 8004e90:	20000020 	.word	0x20000020
 8004e94:	ffff0208 	.word	0xffff0208

08004e98 <__ssputs_r>:
 8004e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e9c:	688e      	ldr	r6, [r1, #8]
 8004e9e:	429e      	cmp	r6, r3
 8004ea0:	4682      	mov	sl, r0
 8004ea2:	460c      	mov	r4, r1
 8004ea4:	4690      	mov	r8, r2
 8004ea6:	461f      	mov	r7, r3
 8004ea8:	d838      	bhi.n	8004f1c <__ssputs_r+0x84>
 8004eaa:	898a      	ldrh	r2, [r1, #12]
 8004eac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004eb0:	d032      	beq.n	8004f18 <__ssputs_r+0x80>
 8004eb2:	6825      	ldr	r5, [r4, #0]
 8004eb4:	6909      	ldr	r1, [r1, #16]
 8004eb6:	eba5 0901 	sub.w	r9, r5, r1
 8004eba:	6965      	ldr	r5, [r4, #20]
 8004ebc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ec0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	444b      	add	r3, r9
 8004ec8:	106d      	asrs	r5, r5, #1
 8004eca:	429d      	cmp	r5, r3
 8004ecc:	bf38      	it	cc
 8004ece:	461d      	movcc	r5, r3
 8004ed0:	0553      	lsls	r3, r2, #21
 8004ed2:	d531      	bpl.n	8004f38 <__ssputs_r+0xa0>
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	f000 fb63 	bl	80055a0 <_malloc_r>
 8004eda:	4606      	mov	r6, r0
 8004edc:	b950      	cbnz	r0, 8004ef4 <__ssputs_r+0x5c>
 8004ede:	230c      	movs	r3, #12
 8004ee0:	f8ca 3000 	str.w	r3, [sl]
 8004ee4:	89a3      	ldrh	r3, [r4, #12]
 8004ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eea:	81a3      	strh	r3, [r4, #12]
 8004eec:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef4:	6921      	ldr	r1, [r4, #16]
 8004ef6:	464a      	mov	r2, r9
 8004ef8:	f000 fabe 	bl	8005478 <memcpy>
 8004efc:	89a3      	ldrh	r3, [r4, #12]
 8004efe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f06:	81a3      	strh	r3, [r4, #12]
 8004f08:	6126      	str	r6, [r4, #16]
 8004f0a:	6165      	str	r5, [r4, #20]
 8004f0c:	444e      	add	r6, r9
 8004f0e:	eba5 0509 	sub.w	r5, r5, r9
 8004f12:	6026      	str	r6, [r4, #0]
 8004f14:	60a5      	str	r5, [r4, #8]
 8004f16:	463e      	mov	r6, r7
 8004f18:	42be      	cmp	r6, r7
 8004f1a:	d900      	bls.n	8004f1e <__ssputs_r+0x86>
 8004f1c:	463e      	mov	r6, r7
 8004f1e:	6820      	ldr	r0, [r4, #0]
 8004f20:	4632      	mov	r2, r6
 8004f22:	4641      	mov	r1, r8
 8004f24:	f000 fab6 	bl	8005494 <memmove>
 8004f28:	68a3      	ldr	r3, [r4, #8]
 8004f2a:	1b9b      	subs	r3, r3, r6
 8004f2c:	60a3      	str	r3, [r4, #8]
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	4433      	add	r3, r6
 8004f32:	6023      	str	r3, [r4, #0]
 8004f34:	2000      	movs	r0, #0
 8004f36:	e7db      	b.n	8004ef0 <__ssputs_r+0x58>
 8004f38:	462a      	mov	r2, r5
 8004f3a:	f000 fba5 	bl	8005688 <_realloc_r>
 8004f3e:	4606      	mov	r6, r0
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d1e1      	bne.n	8004f08 <__ssputs_r+0x70>
 8004f44:	6921      	ldr	r1, [r4, #16]
 8004f46:	4650      	mov	r0, sl
 8004f48:	f000 fabe 	bl	80054c8 <_free_r>
 8004f4c:	e7c7      	b.n	8004ede <__ssputs_r+0x46>
	...

08004f50 <_svfiprintf_r>:
 8004f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f54:	4698      	mov	r8, r3
 8004f56:	898b      	ldrh	r3, [r1, #12]
 8004f58:	061b      	lsls	r3, r3, #24
 8004f5a:	b09d      	sub	sp, #116	; 0x74
 8004f5c:	4607      	mov	r7, r0
 8004f5e:	460d      	mov	r5, r1
 8004f60:	4614      	mov	r4, r2
 8004f62:	d50e      	bpl.n	8004f82 <_svfiprintf_r+0x32>
 8004f64:	690b      	ldr	r3, [r1, #16]
 8004f66:	b963      	cbnz	r3, 8004f82 <_svfiprintf_r+0x32>
 8004f68:	2140      	movs	r1, #64	; 0x40
 8004f6a:	f000 fb19 	bl	80055a0 <_malloc_r>
 8004f6e:	6028      	str	r0, [r5, #0]
 8004f70:	6128      	str	r0, [r5, #16]
 8004f72:	b920      	cbnz	r0, 8004f7e <_svfiprintf_r+0x2e>
 8004f74:	230c      	movs	r3, #12
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7c:	e0d1      	b.n	8005122 <_svfiprintf_r+0x1d2>
 8004f7e:	2340      	movs	r3, #64	; 0x40
 8004f80:	616b      	str	r3, [r5, #20]
 8004f82:	2300      	movs	r3, #0
 8004f84:	9309      	str	r3, [sp, #36]	; 0x24
 8004f86:	2320      	movs	r3, #32
 8004f88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f90:	2330      	movs	r3, #48	; 0x30
 8004f92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800513c <_svfiprintf_r+0x1ec>
 8004f96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f9a:	f04f 0901 	mov.w	r9, #1
 8004f9e:	4623      	mov	r3, r4
 8004fa0:	469a      	mov	sl, r3
 8004fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fa6:	b10a      	cbz	r2, 8004fac <_svfiprintf_r+0x5c>
 8004fa8:	2a25      	cmp	r2, #37	; 0x25
 8004faa:	d1f9      	bne.n	8004fa0 <_svfiprintf_r+0x50>
 8004fac:	ebba 0b04 	subs.w	fp, sl, r4
 8004fb0:	d00b      	beq.n	8004fca <_svfiprintf_r+0x7a>
 8004fb2:	465b      	mov	r3, fp
 8004fb4:	4622      	mov	r2, r4
 8004fb6:	4629      	mov	r1, r5
 8004fb8:	4638      	mov	r0, r7
 8004fba:	f7ff ff6d 	bl	8004e98 <__ssputs_r>
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	f000 80aa 	beq.w	8005118 <_svfiprintf_r+0x1c8>
 8004fc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fc6:	445a      	add	r2, fp
 8004fc8:	9209      	str	r2, [sp, #36]	; 0x24
 8004fca:	f89a 3000 	ldrb.w	r3, [sl]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 80a2 	beq.w	8005118 <_svfiprintf_r+0x1c8>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8004fda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fde:	f10a 0a01 	add.w	sl, sl, #1
 8004fe2:	9304      	str	r3, [sp, #16]
 8004fe4:	9307      	str	r3, [sp, #28]
 8004fe6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fea:	931a      	str	r3, [sp, #104]	; 0x68
 8004fec:	4654      	mov	r4, sl
 8004fee:	2205      	movs	r2, #5
 8004ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ff4:	4851      	ldr	r0, [pc, #324]	; (800513c <_svfiprintf_r+0x1ec>)
 8004ff6:	f7fb f8eb 	bl	80001d0 <memchr>
 8004ffa:	9a04      	ldr	r2, [sp, #16]
 8004ffc:	b9d8      	cbnz	r0, 8005036 <_svfiprintf_r+0xe6>
 8004ffe:	06d0      	lsls	r0, r2, #27
 8005000:	bf44      	itt	mi
 8005002:	2320      	movmi	r3, #32
 8005004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005008:	0711      	lsls	r1, r2, #28
 800500a:	bf44      	itt	mi
 800500c:	232b      	movmi	r3, #43	; 0x2b
 800500e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005012:	f89a 3000 	ldrb.w	r3, [sl]
 8005016:	2b2a      	cmp	r3, #42	; 0x2a
 8005018:	d015      	beq.n	8005046 <_svfiprintf_r+0xf6>
 800501a:	9a07      	ldr	r2, [sp, #28]
 800501c:	4654      	mov	r4, sl
 800501e:	2000      	movs	r0, #0
 8005020:	f04f 0c0a 	mov.w	ip, #10
 8005024:	4621      	mov	r1, r4
 8005026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800502a:	3b30      	subs	r3, #48	; 0x30
 800502c:	2b09      	cmp	r3, #9
 800502e:	d94e      	bls.n	80050ce <_svfiprintf_r+0x17e>
 8005030:	b1b0      	cbz	r0, 8005060 <_svfiprintf_r+0x110>
 8005032:	9207      	str	r2, [sp, #28]
 8005034:	e014      	b.n	8005060 <_svfiprintf_r+0x110>
 8005036:	eba0 0308 	sub.w	r3, r0, r8
 800503a:	fa09 f303 	lsl.w	r3, r9, r3
 800503e:	4313      	orrs	r3, r2
 8005040:	9304      	str	r3, [sp, #16]
 8005042:	46a2      	mov	sl, r4
 8005044:	e7d2      	b.n	8004fec <_svfiprintf_r+0x9c>
 8005046:	9b03      	ldr	r3, [sp, #12]
 8005048:	1d19      	adds	r1, r3, #4
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	9103      	str	r1, [sp, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	bfbb      	ittet	lt
 8005052:	425b      	neglt	r3, r3
 8005054:	f042 0202 	orrlt.w	r2, r2, #2
 8005058:	9307      	strge	r3, [sp, #28]
 800505a:	9307      	strlt	r3, [sp, #28]
 800505c:	bfb8      	it	lt
 800505e:	9204      	strlt	r2, [sp, #16]
 8005060:	7823      	ldrb	r3, [r4, #0]
 8005062:	2b2e      	cmp	r3, #46	; 0x2e
 8005064:	d10c      	bne.n	8005080 <_svfiprintf_r+0x130>
 8005066:	7863      	ldrb	r3, [r4, #1]
 8005068:	2b2a      	cmp	r3, #42	; 0x2a
 800506a:	d135      	bne.n	80050d8 <_svfiprintf_r+0x188>
 800506c:	9b03      	ldr	r3, [sp, #12]
 800506e:	1d1a      	adds	r2, r3, #4
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	9203      	str	r2, [sp, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	bfb8      	it	lt
 8005078:	f04f 33ff 	movlt.w	r3, #4294967295
 800507c:	3402      	adds	r4, #2
 800507e:	9305      	str	r3, [sp, #20]
 8005080:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800514c <_svfiprintf_r+0x1fc>
 8005084:	7821      	ldrb	r1, [r4, #0]
 8005086:	2203      	movs	r2, #3
 8005088:	4650      	mov	r0, sl
 800508a:	f7fb f8a1 	bl	80001d0 <memchr>
 800508e:	b140      	cbz	r0, 80050a2 <_svfiprintf_r+0x152>
 8005090:	2340      	movs	r3, #64	; 0x40
 8005092:	eba0 000a 	sub.w	r0, r0, sl
 8005096:	fa03 f000 	lsl.w	r0, r3, r0
 800509a:	9b04      	ldr	r3, [sp, #16]
 800509c:	4303      	orrs	r3, r0
 800509e:	3401      	adds	r4, #1
 80050a0:	9304      	str	r3, [sp, #16]
 80050a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050a6:	4826      	ldr	r0, [pc, #152]	; (8005140 <_svfiprintf_r+0x1f0>)
 80050a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050ac:	2206      	movs	r2, #6
 80050ae:	f7fb f88f 	bl	80001d0 <memchr>
 80050b2:	2800      	cmp	r0, #0
 80050b4:	d038      	beq.n	8005128 <_svfiprintf_r+0x1d8>
 80050b6:	4b23      	ldr	r3, [pc, #140]	; (8005144 <_svfiprintf_r+0x1f4>)
 80050b8:	bb1b      	cbnz	r3, 8005102 <_svfiprintf_r+0x1b2>
 80050ba:	9b03      	ldr	r3, [sp, #12]
 80050bc:	3307      	adds	r3, #7
 80050be:	f023 0307 	bic.w	r3, r3, #7
 80050c2:	3308      	adds	r3, #8
 80050c4:	9303      	str	r3, [sp, #12]
 80050c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050c8:	4433      	add	r3, r6
 80050ca:	9309      	str	r3, [sp, #36]	; 0x24
 80050cc:	e767      	b.n	8004f9e <_svfiprintf_r+0x4e>
 80050ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80050d2:	460c      	mov	r4, r1
 80050d4:	2001      	movs	r0, #1
 80050d6:	e7a5      	b.n	8005024 <_svfiprintf_r+0xd4>
 80050d8:	2300      	movs	r3, #0
 80050da:	3401      	adds	r4, #1
 80050dc:	9305      	str	r3, [sp, #20]
 80050de:	4619      	mov	r1, r3
 80050e0:	f04f 0c0a 	mov.w	ip, #10
 80050e4:	4620      	mov	r0, r4
 80050e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050ea:	3a30      	subs	r2, #48	; 0x30
 80050ec:	2a09      	cmp	r2, #9
 80050ee:	d903      	bls.n	80050f8 <_svfiprintf_r+0x1a8>
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0c5      	beq.n	8005080 <_svfiprintf_r+0x130>
 80050f4:	9105      	str	r1, [sp, #20]
 80050f6:	e7c3      	b.n	8005080 <_svfiprintf_r+0x130>
 80050f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80050fc:	4604      	mov	r4, r0
 80050fe:	2301      	movs	r3, #1
 8005100:	e7f0      	b.n	80050e4 <_svfiprintf_r+0x194>
 8005102:	ab03      	add	r3, sp, #12
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	462a      	mov	r2, r5
 8005108:	4b0f      	ldr	r3, [pc, #60]	; (8005148 <_svfiprintf_r+0x1f8>)
 800510a:	a904      	add	r1, sp, #16
 800510c:	4638      	mov	r0, r7
 800510e:	f3af 8000 	nop.w
 8005112:	1c42      	adds	r2, r0, #1
 8005114:	4606      	mov	r6, r0
 8005116:	d1d6      	bne.n	80050c6 <_svfiprintf_r+0x176>
 8005118:	89ab      	ldrh	r3, [r5, #12]
 800511a:	065b      	lsls	r3, r3, #25
 800511c:	f53f af2c 	bmi.w	8004f78 <_svfiprintf_r+0x28>
 8005120:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005122:	b01d      	add	sp, #116	; 0x74
 8005124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005128:	ab03      	add	r3, sp, #12
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	462a      	mov	r2, r5
 800512e:	4b06      	ldr	r3, [pc, #24]	; (8005148 <_svfiprintf_r+0x1f8>)
 8005130:	a904      	add	r1, sp, #16
 8005132:	4638      	mov	r0, r7
 8005134:	f000 f87a 	bl	800522c <_printf_i>
 8005138:	e7eb      	b.n	8005112 <_svfiprintf_r+0x1c2>
 800513a:	bf00      	nop
 800513c:	08005858 	.word	0x08005858
 8005140:	08005862 	.word	0x08005862
 8005144:	00000000 	.word	0x00000000
 8005148:	08004e99 	.word	0x08004e99
 800514c:	0800585e 	.word	0x0800585e

08005150 <_printf_common>:
 8005150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005154:	4616      	mov	r6, r2
 8005156:	4699      	mov	r9, r3
 8005158:	688a      	ldr	r2, [r1, #8]
 800515a:	690b      	ldr	r3, [r1, #16]
 800515c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005160:	4293      	cmp	r3, r2
 8005162:	bfb8      	it	lt
 8005164:	4613      	movlt	r3, r2
 8005166:	6033      	str	r3, [r6, #0]
 8005168:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800516c:	4607      	mov	r7, r0
 800516e:	460c      	mov	r4, r1
 8005170:	b10a      	cbz	r2, 8005176 <_printf_common+0x26>
 8005172:	3301      	adds	r3, #1
 8005174:	6033      	str	r3, [r6, #0]
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	0699      	lsls	r1, r3, #26
 800517a:	bf42      	ittt	mi
 800517c:	6833      	ldrmi	r3, [r6, #0]
 800517e:	3302      	addmi	r3, #2
 8005180:	6033      	strmi	r3, [r6, #0]
 8005182:	6825      	ldr	r5, [r4, #0]
 8005184:	f015 0506 	ands.w	r5, r5, #6
 8005188:	d106      	bne.n	8005198 <_printf_common+0x48>
 800518a:	f104 0a19 	add.w	sl, r4, #25
 800518e:	68e3      	ldr	r3, [r4, #12]
 8005190:	6832      	ldr	r2, [r6, #0]
 8005192:	1a9b      	subs	r3, r3, r2
 8005194:	42ab      	cmp	r3, r5
 8005196:	dc26      	bgt.n	80051e6 <_printf_common+0x96>
 8005198:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800519c:	1e13      	subs	r3, r2, #0
 800519e:	6822      	ldr	r2, [r4, #0]
 80051a0:	bf18      	it	ne
 80051a2:	2301      	movne	r3, #1
 80051a4:	0692      	lsls	r2, r2, #26
 80051a6:	d42b      	bmi.n	8005200 <_printf_common+0xb0>
 80051a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051ac:	4649      	mov	r1, r9
 80051ae:	4638      	mov	r0, r7
 80051b0:	47c0      	blx	r8
 80051b2:	3001      	adds	r0, #1
 80051b4:	d01e      	beq.n	80051f4 <_printf_common+0xa4>
 80051b6:	6823      	ldr	r3, [r4, #0]
 80051b8:	68e5      	ldr	r5, [r4, #12]
 80051ba:	6832      	ldr	r2, [r6, #0]
 80051bc:	f003 0306 	and.w	r3, r3, #6
 80051c0:	2b04      	cmp	r3, #4
 80051c2:	bf08      	it	eq
 80051c4:	1aad      	subeq	r5, r5, r2
 80051c6:	68a3      	ldr	r3, [r4, #8]
 80051c8:	6922      	ldr	r2, [r4, #16]
 80051ca:	bf0c      	ite	eq
 80051cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051d0:	2500      	movne	r5, #0
 80051d2:	4293      	cmp	r3, r2
 80051d4:	bfc4      	itt	gt
 80051d6:	1a9b      	subgt	r3, r3, r2
 80051d8:	18ed      	addgt	r5, r5, r3
 80051da:	2600      	movs	r6, #0
 80051dc:	341a      	adds	r4, #26
 80051de:	42b5      	cmp	r5, r6
 80051e0:	d11a      	bne.n	8005218 <_printf_common+0xc8>
 80051e2:	2000      	movs	r0, #0
 80051e4:	e008      	b.n	80051f8 <_printf_common+0xa8>
 80051e6:	2301      	movs	r3, #1
 80051e8:	4652      	mov	r2, sl
 80051ea:	4649      	mov	r1, r9
 80051ec:	4638      	mov	r0, r7
 80051ee:	47c0      	blx	r8
 80051f0:	3001      	adds	r0, #1
 80051f2:	d103      	bne.n	80051fc <_printf_common+0xac>
 80051f4:	f04f 30ff 	mov.w	r0, #4294967295
 80051f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051fc:	3501      	adds	r5, #1
 80051fe:	e7c6      	b.n	800518e <_printf_common+0x3e>
 8005200:	18e1      	adds	r1, r4, r3
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	2030      	movs	r0, #48	; 0x30
 8005206:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800520a:	4422      	add	r2, r4
 800520c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005214:	3302      	adds	r3, #2
 8005216:	e7c7      	b.n	80051a8 <_printf_common+0x58>
 8005218:	2301      	movs	r3, #1
 800521a:	4622      	mov	r2, r4
 800521c:	4649      	mov	r1, r9
 800521e:	4638      	mov	r0, r7
 8005220:	47c0      	blx	r8
 8005222:	3001      	adds	r0, #1
 8005224:	d0e6      	beq.n	80051f4 <_printf_common+0xa4>
 8005226:	3601      	adds	r6, #1
 8005228:	e7d9      	b.n	80051de <_printf_common+0x8e>
	...

0800522c <_printf_i>:
 800522c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005230:	7e0f      	ldrb	r7, [r1, #24]
 8005232:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005234:	2f78      	cmp	r7, #120	; 0x78
 8005236:	4691      	mov	r9, r2
 8005238:	4680      	mov	r8, r0
 800523a:	460c      	mov	r4, r1
 800523c:	469a      	mov	sl, r3
 800523e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005242:	d807      	bhi.n	8005254 <_printf_i+0x28>
 8005244:	2f62      	cmp	r7, #98	; 0x62
 8005246:	d80a      	bhi.n	800525e <_printf_i+0x32>
 8005248:	2f00      	cmp	r7, #0
 800524a:	f000 80d8 	beq.w	80053fe <_printf_i+0x1d2>
 800524e:	2f58      	cmp	r7, #88	; 0x58
 8005250:	f000 80a3 	beq.w	800539a <_printf_i+0x16e>
 8005254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800525c:	e03a      	b.n	80052d4 <_printf_i+0xa8>
 800525e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005262:	2b15      	cmp	r3, #21
 8005264:	d8f6      	bhi.n	8005254 <_printf_i+0x28>
 8005266:	a101      	add	r1, pc, #4	; (adr r1, 800526c <_printf_i+0x40>)
 8005268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800526c:	080052c5 	.word	0x080052c5
 8005270:	080052d9 	.word	0x080052d9
 8005274:	08005255 	.word	0x08005255
 8005278:	08005255 	.word	0x08005255
 800527c:	08005255 	.word	0x08005255
 8005280:	08005255 	.word	0x08005255
 8005284:	080052d9 	.word	0x080052d9
 8005288:	08005255 	.word	0x08005255
 800528c:	08005255 	.word	0x08005255
 8005290:	08005255 	.word	0x08005255
 8005294:	08005255 	.word	0x08005255
 8005298:	080053e5 	.word	0x080053e5
 800529c:	08005309 	.word	0x08005309
 80052a0:	080053c7 	.word	0x080053c7
 80052a4:	08005255 	.word	0x08005255
 80052a8:	08005255 	.word	0x08005255
 80052ac:	08005407 	.word	0x08005407
 80052b0:	08005255 	.word	0x08005255
 80052b4:	08005309 	.word	0x08005309
 80052b8:	08005255 	.word	0x08005255
 80052bc:	08005255 	.word	0x08005255
 80052c0:	080053cf 	.word	0x080053cf
 80052c4:	682b      	ldr	r3, [r5, #0]
 80052c6:	1d1a      	adds	r2, r3, #4
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	602a      	str	r2, [r5, #0]
 80052cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0a3      	b.n	8005420 <_printf_i+0x1f4>
 80052d8:	6820      	ldr	r0, [r4, #0]
 80052da:	6829      	ldr	r1, [r5, #0]
 80052dc:	0606      	lsls	r6, r0, #24
 80052de:	f101 0304 	add.w	r3, r1, #4
 80052e2:	d50a      	bpl.n	80052fa <_printf_i+0xce>
 80052e4:	680e      	ldr	r6, [r1, #0]
 80052e6:	602b      	str	r3, [r5, #0]
 80052e8:	2e00      	cmp	r6, #0
 80052ea:	da03      	bge.n	80052f4 <_printf_i+0xc8>
 80052ec:	232d      	movs	r3, #45	; 0x2d
 80052ee:	4276      	negs	r6, r6
 80052f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052f4:	485e      	ldr	r0, [pc, #376]	; (8005470 <_printf_i+0x244>)
 80052f6:	230a      	movs	r3, #10
 80052f8:	e019      	b.n	800532e <_printf_i+0x102>
 80052fa:	680e      	ldr	r6, [r1, #0]
 80052fc:	602b      	str	r3, [r5, #0]
 80052fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005302:	bf18      	it	ne
 8005304:	b236      	sxthne	r6, r6
 8005306:	e7ef      	b.n	80052e8 <_printf_i+0xbc>
 8005308:	682b      	ldr	r3, [r5, #0]
 800530a:	6820      	ldr	r0, [r4, #0]
 800530c:	1d19      	adds	r1, r3, #4
 800530e:	6029      	str	r1, [r5, #0]
 8005310:	0601      	lsls	r1, r0, #24
 8005312:	d501      	bpl.n	8005318 <_printf_i+0xec>
 8005314:	681e      	ldr	r6, [r3, #0]
 8005316:	e002      	b.n	800531e <_printf_i+0xf2>
 8005318:	0646      	lsls	r6, r0, #25
 800531a:	d5fb      	bpl.n	8005314 <_printf_i+0xe8>
 800531c:	881e      	ldrh	r6, [r3, #0]
 800531e:	4854      	ldr	r0, [pc, #336]	; (8005470 <_printf_i+0x244>)
 8005320:	2f6f      	cmp	r7, #111	; 0x6f
 8005322:	bf0c      	ite	eq
 8005324:	2308      	moveq	r3, #8
 8005326:	230a      	movne	r3, #10
 8005328:	2100      	movs	r1, #0
 800532a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800532e:	6865      	ldr	r5, [r4, #4]
 8005330:	60a5      	str	r5, [r4, #8]
 8005332:	2d00      	cmp	r5, #0
 8005334:	bfa2      	ittt	ge
 8005336:	6821      	ldrge	r1, [r4, #0]
 8005338:	f021 0104 	bicge.w	r1, r1, #4
 800533c:	6021      	strge	r1, [r4, #0]
 800533e:	b90e      	cbnz	r6, 8005344 <_printf_i+0x118>
 8005340:	2d00      	cmp	r5, #0
 8005342:	d04d      	beq.n	80053e0 <_printf_i+0x1b4>
 8005344:	4615      	mov	r5, r2
 8005346:	fbb6 f1f3 	udiv	r1, r6, r3
 800534a:	fb03 6711 	mls	r7, r3, r1, r6
 800534e:	5dc7      	ldrb	r7, [r0, r7]
 8005350:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005354:	4637      	mov	r7, r6
 8005356:	42bb      	cmp	r3, r7
 8005358:	460e      	mov	r6, r1
 800535a:	d9f4      	bls.n	8005346 <_printf_i+0x11a>
 800535c:	2b08      	cmp	r3, #8
 800535e:	d10b      	bne.n	8005378 <_printf_i+0x14c>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	07de      	lsls	r6, r3, #31
 8005364:	d508      	bpl.n	8005378 <_printf_i+0x14c>
 8005366:	6923      	ldr	r3, [r4, #16]
 8005368:	6861      	ldr	r1, [r4, #4]
 800536a:	4299      	cmp	r1, r3
 800536c:	bfde      	ittt	le
 800536e:	2330      	movle	r3, #48	; 0x30
 8005370:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005374:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005378:	1b52      	subs	r2, r2, r5
 800537a:	6122      	str	r2, [r4, #16]
 800537c:	f8cd a000 	str.w	sl, [sp]
 8005380:	464b      	mov	r3, r9
 8005382:	aa03      	add	r2, sp, #12
 8005384:	4621      	mov	r1, r4
 8005386:	4640      	mov	r0, r8
 8005388:	f7ff fee2 	bl	8005150 <_printf_common>
 800538c:	3001      	adds	r0, #1
 800538e:	d14c      	bne.n	800542a <_printf_i+0x1fe>
 8005390:	f04f 30ff 	mov.w	r0, #4294967295
 8005394:	b004      	add	sp, #16
 8005396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800539a:	4835      	ldr	r0, [pc, #212]	; (8005470 <_printf_i+0x244>)
 800539c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80053a0:	6829      	ldr	r1, [r5, #0]
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80053a8:	6029      	str	r1, [r5, #0]
 80053aa:	061d      	lsls	r5, r3, #24
 80053ac:	d514      	bpl.n	80053d8 <_printf_i+0x1ac>
 80053ae:	07df      	lsls	r7, r3, #31
 80053b0:	bf44      	itt	mi
 80053b2:	f043 0320 	orrmi.w	r3, r3, #32
 80053b6:	6023      	strmi	r3, [r4, #0]
 80053b8:	b91e      	cbnz	r6, 80053c2 <_printf_i+0x196>
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	f023 0320 	bic.w	r3, r3, #32
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	2310      	movs	r3, #16
 80053c4:	e7b0      	b.n	8005328 <_printf_i+0xfc>
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	f043 0320 	orr.w	r3, r3, #32
 80053cc:	6023      	str	r3, [r4, #0]
 80053ce:	2378      	movs	r3, #120	; 0x78
 80053d0:	4828      	ldr	r0, [pc, #160]	; (8005474 <_printf_i+0x248>)
 80053d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053d6:	e7e3      	b.n	80053a0 <_printf_i+0x174>
 80053d8:	0659      	lsls	r1, r3, #25
 80053da:	bf48      	it	mi
 80053dc:	b2b6      	uxthmi	r6, r6
 80053de:	e7e6      	b.n	80053ae <_printf_i+0x182>
 80053e0:	4615      	mov	r5, r2
 80053e2:	e7bb      	b.n	800535c <_printf_i+0x130>
 80053e4:	682b      	ldr	r3, [r5, #0]
 80053e6:	6826      	ldr	r6, [r4, #0]
 80053e8:	6961      	ldr	r1, [r4, #20]
 80053ea:	1d18      	adds	r0, r3, #4
 80053ec:	6028      	str	r0, [r5, #0]
 80053ee:	0635      	lsls	r5, r6, #24
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	d501      	bpl.n	80053f8 <_printf_i+0x1cc>
 80053f4:	6019      	str	r1, [r3, #0]
 80053f6:	e002      	b.n	80053fe <_printf_i+0x1d2>
 80053f8:	0670      	lsls	r0, r6, #25
 80053fa:	d5fb      	bpl.n	80053f4 <_printf_i+0x1c8>
 80053fc:	8019      	strh	r1, [r3, #0]
 80053fe:	2300      	movs	r3, #0
 8005400:	6123      	str	r3, [r4, #16]
 8005402:	4615      	mov	r5, r2
 8005404:	e7ba      	b.n	800537c <_printf_i+0x150>
 8005406:	682b      	ldr	r3, [r5, #0]
 8005408:	1d1a      	adds	r2, r3, #4
 800540a:	602a      	str	r2, [r5, #0]
 800540c:	681d      	ldr	r5, [r3, #0]
 800540e:	6862      	ldr	r2, [r4, #4]
 8005410:	2100      	movs	r1, #0
 8005412:	4628      	mov	r0, r5
 8005414:	f7fa fedc 	bl	80001d0 <memchr>
 8005418:	b108      	cbz	r0, 800541e <_printf_i+0x1f2>
 800541a:	1b40      	subs	r0, r0, r5
 800541c:	6060      	str	r0, [r4, #4]
 800541e:	6863      	ldr	r3, [r4, #4]
 8005420:	6123      	str	r3, [r4, #16]
 8005422:	2300      	movs	r3, #0
 8005424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005428:	e7a8      	b.n	800537c <_printf_i+0x150>
 800542a:	6923      	ldr	r3, [r4, #16]
 800542c:	462a      	mov	r2, r5
 800542e:	4649      	mov	r1, r9
 8005430:	4640      	mov	r0, r8
 8005432:	47d0      	blx	sl
 8005434:	3001      	adds	r0, #1
 8005436:	d0ab      	beq.n	8005390 <_printf_i+0x164>
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	079b      	lsls	r3, r3, #30
 800543c:	d413      	bmi.n	8005466 <_printf_i+0x23a>
 800543e:	68e0      	ldr	r0, [r4, #12]
 8005440:	9b03      	ldr	r3, [sp, #12]
 8005442:	4298      	cmp	r0, r3
 8005444:	bfb8      	it	lt
 8005446:	4618      	movlt	r0, r3
 8005448:	e7a4      	b.n	8005394 <_printf_i+0x168>
 800544a:	2301      	movs	r3, #1
 800544c:	4632      	mov	r2, r6
 800544e:	4649      	mov	r1, r9
 8005450:	4640      	mov	r0, r8
 8005452:	47d0      	blx	sl
 8005454:	3001      	adds	r0, #1
 8005456:	d09b      	beq.n	8005390 <_printf_i+0x164>
 8005458:	3501      	adds	r5, #1
 800545a:	68e3      	ldr	r3, [r4, #12]
 800545c:	9903      	ldr	r1, [sp, #12]
 800545e:	1a5b      	subs	r3, r3, r1
 8005460:	42ab      	cmp	r3, r5
 8005462:	dcf2      	bgt.n	800544a <_printf_i+0x21e>
 8005464:	e7eb      	b.n	800543e <_printf_i+0x212>
 8005466:	2500      	movs	r5, #0
 8005468:	f104 0619 	add.w	r6, r4, #25
 800546c:	e7f5      	b.n	800545a <_printf_i+0x22e>
 800546e:	bf00      	nop
 8005470:	08005869 	.word	0x08005869
 8005474:	0800587a 	.word	0x0800587a

08005478 <memcpy>:
 8005478:	440a      	add	r2, r1
 800547a:	4291      	cmp	r1, r2
 800547c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005480:	d100      	bne.n	8005484 <memcpy+0xc>
 8005482:	4770      	bx	lr
 8005484:	b510      	push	{r4, lr}
 8005486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800548a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800548e:	4291      	cmp	r1, r2
 8005490:	d1f9      	bne.n	8005486 <memcpy+0xe>
 8005492:	bd10      	pop	{r4, pc}

08005494 <memmove>:
 8005494:	4288      	cmp	r0, r1
 8005496:	b510      	push	{r4, lr}
 8005498:	eb01 0402 	add.w	r4, r1, r2
 800549c:	d902      	bls.n	80054a4 <memmove+0x10>
 800549e:	4284      	cmp	r4, r0
 80054a0:	4623      	mov	r3, r4
 80054a2:	d807      	bhi.n	80054b4 <memmove+0x20>
 80054a4:	1e43      	subs	r3, r0, #1
 80054a6:	42a1      	cmp	r1, r4
 80054a8:	d008      	beq.n	80054bc <memmove+0x28>
 80054aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054b2:	e7f8      	b.n	80054a6 <memmove+0x12>
 80054b4:	4402      	add	r2, r0
 80054b6:	4601      	mov	r1, r0
 80054b8:	428a      	cmp	r2, r1
 80054ba:	d100      	bne.n	80054be <memmove+0x2a>
 80054bc:	bd10      	pop	{r4, pc}
 80054be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054c6:	e7f7      	b.n	80054b8 <memmove+0x24>

080054c8 <_free_r>:
 80054c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054ca:	2900      	cmp	r1, #0
 80054cc:	d044      	beq.n	8005558 <_free_r+0x90>
 80054ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054d2:	9001      	str	r0, [sp, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f1a1 0404 	sub.w	r4, r1, #4
 80054da:	bfb8      	it	lt
 80054dc:	18e4      	addlt	r4, r4, r3
 80054de:	f000 f913 	bl	8005708 <__malloc_lock>
 80054e2:	4a1e      	ldr	r2, [pc, #120]	; (800555c <_free_r+0x94>)
 80054e4:	9801      	ldr	r0, [sp, #4]
 80054e6:	6813      	ldr	r3, [r2, #0]
 80054e8:	b933      	cbnz	r3, 80054f8 <_free_r+0x30>
 80054ea:	6063      	str	r3, [r4, #4]
 80054ec:	6014      	str	r4, [r2, #0]
 80054ee:	b003      	add	sp, #12
 80054f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054f4:	f000 b90e 	b.w	8005714 <__malloc_unlock>
 80054f8:	42a3      	cmp	r3, r4
 80054fa:	d908      	bls.n	800550e <_free_r+0x46>
 80054fc:	6825      	ldr	r5, [r4, #0]
 80054fe:	1961      	adds	r1, r4, r5
 8005500:	428b      	cmp	r3, r1
 8005502:	bf01      	itttt	eq
 8005504:	6819      	ldreq	r1, [r3, #0]
 8005506:	685b      	ldreq	r3, [r3, #4]
 8005508:	1949      	addeq	r1, r1, r5
 800550a:	6021      	streq	r1, [r4, #0]
 800550c:	e7ed      	b.n	80054ea <_free_r+0x22>
 800550e:	461a      	mov	r2, r3
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	b10b      	cbz	r3, 8005518 <_free_r+0x50>
 8005514:	42a3      	cmp	r3, r4
 8005516:	d9fa      	bls.n	800550e <_free_r+0x46>
 8005518:	6811      	ldr	r1, [r2, #0]
 800551a:	1855      	adds	r5, r2, r1
 800551c:	42a5      	cmp	r5, r4
 800551e:	d10b      	bne.n	8005538 <_free_r+0x70>
 8005520:	6824      	ldr	r4, [r4, #0]
 8005522:	4421      	add	r1, r4
 8005524:	1854      	adds	r4, r2, r1
 8005526:	42a3      	cmp	r3, r4
 8005528:	6011      	str	r1, [r2, #0]
 800552a:	d1e0      	bne.n	80054ee <_free_r+0x26>
 800552c:	681c      	ldr	r4, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	6053      	str	r3, [r2, #4]
 8005532:	4421      	add	r1, r4
 8005534:	6011      	str	r1, [r2, #0]
 8005536:	e7da      	b.n	80054ee <_free_r+0x26>
 8005538:	d902      	bls.n	8005540 <_free_r+0x78>
 800553a:	230c      	movs	r3, #12
 800553c:	6003      	str	r3, [r0, #0]
 800553e:	e7d6      	b.n	80054ee <_free_r+0x26>
 8005540:	6825      	ldr	r5, [r4, #0]
 8005542:	1961      	adds	r1, r4, r5
 8005544:	428b      	cmp	r3, r1
 8005546:	bf04      	itt	eq
 8005548:	6819      	ldreq	r1, [r3, #0]
 800554a:	685b      	ldreq	r3, [r3, #4]
 800554c:	6063      	str	r3, [r4, #4]
 800554e:	bf04      	itt	eq
 8005550:	1949      	addeq	r1, r1, r5
 8005552:	6021      	streq	r1, [r4, #0]
 8005554:	6054      	str	r4, [r2, #4]
 8005556:	e7ca      	b.n	80054ee <_free_r+0x26>
 8005558:	b003      	add	sp, #12
 800555a:	bd30      	pop	{r4, r5, pc}
 800555c:	2000022c 	.word	0x2000022c

08005560 <sbrk_aligned>:
 8005560:	b570      	push	{r4, r5, r6, lr}
 8005562:	4e0e      	ldr	r6, [pc, #56]	; (800559c <sbrk_aligned+0x3c>)
 8005564:	460c      	mov	r4, r1
 8005566:	6831      	ldr	r1, [r6, #0]
 8005568:	4605      	mov	r5, r0
 800556a:	b911      	cbnz	r1, 8005572 <sbrk_aligned+0x12>
 800556c:	f000 f8bc 	bl	80056e8 <_sbrk_r>
 8005570:	6030      	str	r0, [r6, #0]
 8005572:	4621      	mov	r1, r4
 8005574:	4628      	mov	r0, r5
 8005576:	f000 f8b7 	bl	80056e8 <_sbrk_r>
 800557a:	1c43      	adds	r3, r0, #1
 800557c:	d00a      	beq.n	8005594 <sbrk_aligned+0x34>
 800557e:	1cc4      	adds	r4, r0, #3
 8005580:	f024 0403 	bic.w	r4, r4, #3
 8005584:	42a0      	cmp	r0, r4
 8005586:	d007      	beq.n	8005598 <sbrk_aligned+0x38>
 8005588:	1a21      	subs	r1, r4, r0
 800558a:	4628      	mov	r0, r5
 800558c:	f000 f8ac 	bl	80056e8 <_sbrk_r>
 8005590:	3001      	adds	r0, #1
 8005592:	d101      	bne.n	8005598 <sbrk_aligned+0x38>
 8005594:	f04f 34ff 	mov.w	r4, #4294967295
 8005598:	4620      	mov	r0, r4
 800559a:	bd70      	pop	{r4, r5, r6, pc}
 800559c:	20000230 	.word	0x20000230

080055a0 <_malloc_r>:
 80055a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055a4:	1ccd      	adds	r5, r1, #3
 80055a6:	f025 0503 	bic.w	r5, r5, #3
 80055aa:	3508      	adds	r5, #8
 80055ac:	2d0c      	cmp	r5, #12
 80055ae:	bf38      	it	cc
 80055b0:	250c      	movcc	r5, #12
 80055b2:	2d00      	cmp	r5, #0
 80055b4:	4607      	mov	r7, r0
 80055b6:	db01      	blt.n	80055bc <_malloc_r+0x1c>
 80055b8:	42a9      	cmp	r1, r5
 80055ba:	d905      	bls.n	80055c8 <_malloc_r+0x28>
 80055bc:	230c      	movs	r3, #12
 80055be:	603b      	str	r3, [r7, #0]
 80055c0:	2600      	movs	r6, #0
 80055c2:	4630      	mov	r0, r6
 80055c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055c8:	4e2e      	ldr	r6, [pc, #184]	; (8005684 <_malloc_r+0xe4>)
 80055ca:	f000 f89d 	bl	8005708 <__malloc_lock>
 80055ce:	6833      	ldr	r3, [r6, #0]
 80055d0:	461c      	mov	r4, r3
 80055d2:	bb34      	cbnz	r4, 8005622 <_malloc_r+0x82>
 80055d4:	4629      	mov	r1, r5
 80055d6:	4638      	mov	r0, r7
 80055d8:	f7ff ffc2 	bl	8005560 <sbrk_aligned>
 80055dc:	1c43      	adds	r3, r0, #1
 80055de:	4604      	mov	r4, r0
 80055e0:	d14d      	bne.n	800567e <_malloc_r+0xde>
 80055e2:	6834      	ldr	r4, [r6, #0]
 80055e4:	4626      	mov	r6, r4
 80055e6:	2e00      	cmp	r6, #0
 80055e8:	d140      	bne.n	800566c <_malloc_r+0xcc>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	4631      	mov	r1, r6
 80055ee:	4638      	mov	r0, r7
 80055f0:	eb04 0803 	add.w	r8, r4, r3
 80055f4:	f000 f878 	bl	80056e8 <_sbrk_r>
 80055f8:	4580      	cmp	r8, r0
 80055fa:	d13a      	bne.n	8005672 <_malloc_r+0xd2>
 80055fc:	6821      	ldr	r1, [r4, #0]
 80055fe:	3503      	adds	r5, #3
 8005600:	1a6d      	subs	r5, r5, r1
 8005602:	f025 0503 	bic.w	r5, r5, #3
 8005606:	3508      	adds	r5, #8
 8005608:	2d0c      	cmp	r5, #12
 800560a:	bf38      	it	cc
 800560c:	250c      	movcc	r5, #12
 800560e:	4629      	mov	r1, r5
 8005610:	4638      	mov	r0, r7
 8005612:	f7ff ffa5 	bl	8005560 <sbrk_aligned>
 8005616:	3001      	adds	r0, #1
 8005618:	d02b      	beq.n	8005672 <_malloc_r+0xd2>
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	442b      	add	r3, r5
 800561e:	6023      	str	r3, [r4, #0]
 8005620:	e00e      	b.n	8005640 <_malloc_r+0xa0>
 8005622:	6822      	ldr	r2, [r4, #0]
 8005624:	1b52      	subs	r2, r2, r5
 8005626:	d41e      	bmi.n	8005666 <_malloc_r+0xc6>
 8005628:	2a0b      	cmp	r2, #11
 800562a:	d916      	bls.n	800565a <_malloc_r+0xba>
 800562c:	1961      	adds	r1, r4, r5
 800562e:	42a3      	cmp	r3, r4
 8005630:	6025      	str	r5, [r4, #0]
 8005632:	bf18      	it	ne
 8005634:	6059      	strne	r1, [r3, #4]
 8005636:	6863      	ldr	r3, [r4, #4]
 8005638:	bf08      	it	eq
 800563a:	6031      	streq	r1, [r6, #0]
 800563c:	5162      	str	r2, [r4, r5]
 800563e:	604b      	str	r3, [r1, #4]
 8005640:	4638      	mov	r0, r7
 8005642:	f104 060b 	add.w	r6, r4, #11
 8005646:	f000 f865 	bl	8005714 <__malloc_unlock>
 800564a:	f026 0607 	bic.w	r6, r6, #7
 800564e:	1d23      	adds	r3, r4, #4
 8005650:	1af2      	subs	r2, r6, r3
 8005652:	d0b6      	beq.n	80055c2 <_malloc_r+0x22>
 8005654:	1b9b      	subs	r3, r3, r6
 8005656:	50a3      	str	r3, [r4, r2]
 8005658:	e7b3      	b.n	80055c2 <_malloc_r+0x22>
 800565a:	6862      	ldr	r2, [r4, #4]
 800565c:	42a3      	cmp	r3, r4
 800565e:	bf0c      	ite	eq
 8005660:	6032      	streq	r2, [r6, #0]
 8005662:	605a      	strne	r2, [r3, #4]
 8005664:	e7ec      	b.n	8005640 <_malloc_r+0xa0>
 8005666:	4623      	mov	r3, r4
 8005668:	6864      	ldr	r4, [r4, #4]
 800566a:	e7b2      	b.n	80055d2 <_malloc_r+0x32>
 800566c:	4634      	mov	r4, r6
 800566e:	6876      	ldr	r6, [r6, #4]
 8005670:	e7b9      	b.n	80055e6 <_malloc_r+0x46>
 8005672:	230c      	movs	r3, #12
 8005674:	603b      	str	r3, [r7, #0]
 8005676:	4638      	mov	r0, r7
 8005678:	f000 f84c 	bl	8005714 <__malloc_unlock>
 800567c:	e7a1      	b.n	80055c2 <_malloc_r+0x22>
 800567e:	6025      	str	r5, [r4, #0]
 8005680:	e7de      	b.n	8005640 <_malloc_r+0xa0>
 8005682:	bf00      	nop
 8005684:	2000022c 	.word	0x2000022c

08005688 <_realloc_r>:
 8005688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800568c:	4680      	mov	r8, r0
 800568e:	4614      	mov	r4, r2
 8005690:	460e      	mov	r6, r1
 8005692:	b921      	cbnz	r1, 800569e <_realloc_r+0x16>
 8005694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005698:	4611      	mov	r1, r2
 800569a:	f7ff bf81 	b.w	80055a0 <_malloc_r>
 800569e:	b92a      	cbnz	r2, 80056ac <_realloc_r+0x24>
 80056a0:	f7ff ff12 	bl	80054c8 <_free_r>
 80056a4:	4625      	mov	r5, r4
 80056a6:	4628      	mov	r0, r5
 80056a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056ac:	f000 f838 	bl	8005720 <_malloc_usable_size_r>
 80056b0:	4284      	cmp	r4, r0
 80056b2:	4607      	mov	r7, r0
 80056b4:	d802      	bhi.n	80056bc <_realloc_r+0x34>
 80056b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056ba:	d812      	bhi.n	80056e2 <_realloc_r+0x5a>
 80056bc:	4621      	mov	r1, r4
 80056be:	4640      	mov	r0, r8
 80056c0:	f7ff ff6e 	bl	80055a0 <_malloc_r>
 80056c4:	4605      	mov	r5, r0
 80056c6:	2800      	cmp	r0, #0
 80056c8:	d0ed      	beq.n	80056a6 <_realloc_r+0x1e>
 80056ca:	42bc      	cmp	r4, r7
 80056cc:	4622      	mov	r2, r4
 80056ce:	4631      	mov	r1, r6
 80056d0:	bf28      	it	cs
 80056d2:	463a      	movcs	r2, r7
 80056d4:	f7ff fed0 	bl	8005478 <memcpy>
 80056d8:	4631      	mov	r1, r6
 80056da:	4640      	mov	r0, r8
 80056dc:	f7ff fef4 	bl	80054c8 <_free_r>
 80056e0:	e7e1      	b.n	80056a6 <_realloc_r+0x1e>
 80056e2:	4635      	mov	r5, r6
 80056e4:	e7df      	b.n	80056a6 <_realloc_r+0x1e>
	...

080056e8 <_sbrk_r>:
 80056e8:	b538      	push	{r3, r4, r5, lr}
 80056ea:	4d06      	ldr	r5, [pc, #24]	; (8005704 <_sbrk_r+0x1c>)
 80056ec:	2300      	movs	r3, #0
 80056ee:	4604      	mov	r4, r0
 80056f0:	4608      	mov	r0, r1
 80056f2:	602b      	str	r3, [r5, #0]
 80056f4:	f7fb fb8a 	bl	8000e0c <_sbrk>
 80056f8:	1c43      	adds	r3, r0, #1
 80056fa:	d102      	bne.n	8005702 <_sbrk_r+0x1a>
 80056fc:	682b      	ldr	r3, [r5, #0]
 80056fe:	b103      	cbz	r3, 8005702 <_sbrk_r+0x1a>
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	bd38      	pop	{r3, r4, r5, pc}
 8005704:	20000234 	.word	0x20000234

08005708 <__malloc_lock>:
 8005708:	4801      	ldr	r0, [pc, #4]	; (8005710 <__malloc_lock+0x8>)
 800570a:	f000 b811 	b.w	8005730 <__retarget_lock_acquire_recursive>
 800570e:	bf00      	nop
 8005710:	20000238 	.word	0x20000238

08005714 <__malloc_unlock>:
 8005714:	4801      	ldr	r0, [pc, #4]	; (800571c <__malloc_unlock+0x8>)
 8005716:	f000 b80c 	b.w	8005732 <__retarget_lock_release_recursive>
 800571a:	bf00      	nop
 800571c:	20000238 	.word	0x20000238

08005720 <_malloc_usable_size_r>:
 8005720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005724:	1f18      	subs	r0, r3, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	bfbc      	itt	lt
 800572a:	580b      	ldrlt	r3, [r1, r0]
 800572c:	18c0      	addlt	r0, r0, r3
 800572e:	4770      	bx	lr

08005730 <__retarget_lock_acquire_recursive>:
 8005730:	4770      	bx	lr

08005732 <__retarget_lock_release_recursive>:
 8005732:	4770      	bx	lr

08005734 <_init>:
 8005734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005736:	bf00      	nop
 8005738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800573a:	bc08      	pop	{r3}
 800573c:	469e      	mov	lr, r3
 800573e:	4770      	bx	lr

08005740 <_fini>:
 8005740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005742:	bf00      	nop
 8005744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005746:	bc08      	pop	{r3}
 8005748:	469e      	mov	lr, r3
 800574a:	4770      	bx	lr
